/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Image;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JSplitPane;
import model.CompDepartment;
import model.CompDepartmentDir;
import model.Company;
import model.CompanyDir;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import model.Government;
import model.GovernmentDir;
import model.JobAppointments;
import model.JobAppointmentsDir;
import model.UniCollege;
import model.UniCollegeDir;
import model.UniDepartment;
import model.UniDepartmentDir;
import model.UniStudent;
import model.UniStudentDir;
import model.University;
import model.UniversityDir;

/**
 *
 * @author Aditya, Ameya, Nainil
 */
public class AnalyticsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form Choice_JPanel
     */
    JSplitPane splitPane;
    Connection conn = null;
    String choice = "";
    CompDepartmentDir compDeptDir = new CompDepartmentDir();
    CompanyDir compDir = new CompanyDir();
    Integer selectedRow = -1;
    Integer selectedRowStudent = -1;
    Company selectedComp = null;
    UniStudentDir uniStudents = new UniStudentDir();
    UniCollegeDir uniColleges = new UniCollegeDir();
    UniversityDir universities = new UniversityDir();
    UniDepartmentDir uniDepartments = new UniDepartmentDir();
    JobAppointmentsDir jobAppDir = new JobAppointmentsDir(); 
    JobAppointments selectedJob = new JobAppointments();
    GovernmentDir govDir = new GovernmentDir(); 
    Government selectedGov = new Government();
    
    
    public AnalyticsJPanel(JSplitPane splitPaneMain,Connection conn) {
        this.conn = conn;
        initComponents();
//        btnPostListing.setEnabled(false);
        splitPane = splitPaneMain;
        
//        this.selectedComp = selectedComp;
//        lblHeading.setText(this.selectedComp.getName());
//        getAllDepartments();
//        populateJobListingsTable(compDeptDir);
//        clearAllFields();
        getAllUniversityData();
        getAllStudents();
//        findAllJobAppsOfStudent(selectedComp);
//        populateStudentDetilsTable(jobAppDir);
//        Test test = new Test();
//        test.setVisible(true);
//        tblJobListings.getTableHeader().setFont( new Font( "Trebuchet MS" , Font.PLAIN, 18 ));
//        tblStudentDetails.getTableHeader().setFont( new Font( "Trebuchet MS" , Font.PLAIN, 18 ));
        createPieChart();
//        Charts charts2 = new Charts(conn);
        charts.getData(conn);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dateChooser2 = new com.raven.datechooser.DateChooser();
        kGradientPanel7 = new keeptoo.KGradientPanel();
        lblDashboard = new javax.swing.JLabel();
        analyticsTabbedPane = new javax.swing.JTabbedPane();
        graphsJPanel = new javax.swing.JPanel();
        kGradientPanel8 = new keeptoo.KGradientPanel();
        charts = new UI.Charts();
        pieChartsJPanel = new javax.swing.JPanel();
        kGradientPanel9 = new keeptoo.KGradientPanel();
        pieChartNationality = new UI.PolarAreaChart();
        pieChartRate = new UI.PolarAreaChart();
        lblRate = new javax.swing.JLabel();
        lblNationality = new javax.swing.JLabel();
        btnLogout = new button.Button();

        dateChooser2.setDateFormat("yyyy-MM-dd");

        setPreferredSize(new java.awt.Dimension(1000, 630));

        kGradientPanel7.setkEndColor(new java.awt.Color(255, 204, 255));
        kGradientPanel7.setkStartColor(new java.awt.Color(204, 255, 204));
        kGradientPanel7.setPreferredSize(new java.awt.Dimension(1000, 630));

        lblDashboard.setFont(new java.awt.Font("Trebuchet MS", 1, 30)); // NOI18N
        lblDashboard.setText("Analytics Dashboard");

        analyticsTabbedPane.setBackground(new java.awt.Color(255, 204, 255));
        analyticsTabbedPane.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N

        kGradientPanel8.setkEndColor(new java.awt.Color(255, 204, 255));
        kGradientPanel8.setkStartColor(new java.awt.Color(204, 255, 204));
        kGradientPanel8.setPreferredSize(new java.awt.Dimension(1000, 630));
        kGradientPanel8.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        kGradientPanel8.add(charts, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, 840, 430));

        javax.swing.GroupLayout graphsJPanelLayout = new javax.swing.GroupLayout(graphsJPanel);
        graphsJPanel.setLayout(graphsJPanelLayout);
        graphsJPanelLayout.setHorizontalGroup(
            graphsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, 998, Short.MAX_VALUE)
        );
        graphsJPanelLayout.setVerticalGroup(
            graphsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE)
        );

        analyticsTabbedPane.addTab("GRAPHS", graphsJPanel);

        kGradientPanel9.setkEndColor(new java.awt.Color(255, 204, 255));
        kGradientPanel9.setkStartColor(new java.awt.Color(204, 255, 204));
        kGradientPanel9.setPreferredSize(new java.awt.Dimension(1000, 630));
        kGradientPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        kGradientPanel9.add(pieChartNationality, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 120, 330, 330));
        kGradientPanel9.add(pieChartRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 120, 360, 330));

        lblRate.setFont(new java.awt.Font("Trebuchet MS", 1, 25)); // NOI18N
        lblRate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRate.setText("Average Hourly Rate by City");
        kGradientPanel9.add(lblRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 60, 330, -1));

        lblNationality.setFont(new java.awt.Font("Trebuchet MS", 1, 25)); // NOI18N
        lblNationality.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNationality.setText("Segregation by Nationality");
        kGradientPanel9.add(lblNationality, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 60, 330, -1));

        javax.swing.GroupLayout pieChartsJPanelLayout = new javax.swing.GroupLayout(pieChartsJPanel);
        pieChartsJPanel.setLayout(pieChartsJPanelLayout);
        pieChartsJPanelLayout.setHorizontalGroup(
            pieChartsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, 998, Short.MAX_VALUE)
        );
        pieChartsJPanelLayout.setVerticalGroup(
            pieChartsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pieChartsJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(kGradientPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE))
        );

        analyticsTabbedPane.addTab("PIE CHARTS", pieChartsJPanel);

        btnLogout.setBackground(new java.awt.Color(204, 204, 255));
        btnLogout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icon_3.png"))); // NOI18N
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout kGradientPanel7Layout = new javax.swing.GroupLayout(kGradientPanel7);
        kGradientPanel7.setLayout(kGradientPanel7Layout);
        kGradientPanel7Layout.setHorizontalGroup(
            kGradientPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel7Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblDashboard)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 642, Short.MAX_VALUE)
                .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(kGradientPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(kGradientPanel7Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(analyticsTabbedPane)
                    .addContainerGap()))
        );
        kGradientPanel7Layout.setVerticalGroup(
            kGradientPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(kGradientPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDashboard))
                .addGap(580, 580, 580))
            .addGroup(kGradientPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(kGradientPanel7Layout.createSequentialGroup()
                    .addGap(75, 75, 75)
                    .addComponent(analyticsTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(30, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        int res = JOptionPane.showConfirmDialog(null, "Are you sure you want to logout?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE);
        if(res == 0) {
            GovernmentChoiceJPanel choicePanel = new GovernmentChoiceJPanel(splitPane, conn);
            splitPane.setRightComponent(choicePanel);
        }
        else{
            //Pressed No
        }
    }//GEN-LAST:event_btnLogoutActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane analyticsTabbedPane;
    private button.Button btnLogout;
    private UI.Charts charts;
    private com.raven.datechooser.DateChooser dateChooser2;
    private javax.swing.JPanel graphsJPanel;
    private keeptoo.KGradientPanel kGradientPanel7;
    private keeptoo.KGradientPanel kGradientPanel8;
    private keeptoo.KGradientPanel kGradientPanel9;
    private javax.swing.JLabel lblDashboard;
    private javax.swing.JLabel lblNationality;
    private javax.swing.JLabel lblRate;
    private UI.PolarAreaChart pieChartNationality;
    private UI.PolarAreaChart pieChartRate;
    private javax.swing.JPanel pieChartsJPanel;
    // End of variables declaration//GEN-END:variables
    
//    public void getAllDepartments(){
//        try {
//            String queryDepartments = "SELECT * FROM job_listings WHERE company_name='"+selectedComp.getName()+"'";
//            Statement st = conn.createStatement();
//            ResultSet rs = st.executeQuery(queryDepartments); 
//                while (rs.next())
//                {
//                    
//                    CompDepartment dept = compDeptDir.addCompDepartment();
//                    
//                    dept.setJobId(rs.getInt("id"));
//                    dept.setCompany(selectedComp);                 
//                    dept.setJobDescription(rs.getString("job_description"));
//                    dept.setLevel(rs.getString("level"));
//                    dept.setLocation(rs.getString("location"));
//                    dept.setPosition(rs.getString("position"));
//                    dept.setRole(rs.getString("role"));
//                    dept.setSalaryPerHr(rs.getDouble("salary_offered"));
//                    dept.setStartDate(LocalDate.parse(rs.getString("start_date")));
//                    dept.setTitle(rs.getString("job_title"));
//                    dept.setVisible(rs.getBoolean("visible"));
//                    
//                    
//                }
//                st.close();
////                stCompany.close();
//        } catch (SQLException ex) {
//            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
//        }
//    }
      
    
    public void updateDepartmentToDb(CompDepartment oldCompDepartment, CompDepartment newCompDepartment){
        try {
            
            String queryNewDept = "UPDATE job_listings SET role = '" + newCompDepartment.getRole() + "' , level = '" + newCompDepartment.getLevel() + "'"
                    + ", position = '" + newCompDepartment.getPosition()+ "', job_description = '" + newCompDepartment.getJobDescription() 
                    + "', job_title = '" + newCompDepartment.getTitle()+  "', start_date = '" + newCompDepartment.getStartDate().toString()
                    + "', salary_offered = '" + newCompDepartment.getSalaryPerHr()
                    + "', location = '" + newCompDepartment.getLocation()+ "' WHERE id='"
                    + oldCompDepartment.getJobId()+ "'";
            Statement st = conn.createStatement();
            st.executeUpdate(queryNewDept);   
            st.close();
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
//   
    
//    public void saveDepartmentToDb(CompDepartment department){
//        try {
//            String queryNewDepartment = "INSERT into job_listings (company_name, role, level, position, job_description, job_title, start_date, salary_offered, location, visible) VALUES "
//                    + "('"+ selectedComp.getName()+ "', '"  + department.getRole()+ "' , '" + department.getLevel() + "' "
//                    + ", '" + department.getPosition()+ "' , '" + department.getJobDescription()+ "' , '" + department.getTitle()+ "' , '" + department.getStartDate().toString() + "' "
//                    + ", '" + department.getSalaryPerHr().toString() + "' , '" + department.getLocation() + "' , '1' )";
//            Statement st = conn.createStatement();
//            st.executeUpdate(queryNewDepartment); 
//            st.close();
//            
//            compDeptDir.removeAllCompDepartment();
//            getAllDepartments();
////            populateJobListingsTable(compDeptDir);
////            clearAllFields();
//        
//        } catch (SQLException ex) {
//            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
//        }
//    }
    
    public void deleteDepartment(CompDepartment dept){
        int result = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this entry?", "Confirm Deletion", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        if(result == JOptionPane.OK_OPTION ){
//            compDeptDir.deleteCompDepartment(dept);
            CompDepartment newDept = new CompDepartment();
            newDept = dept;
            newDept.setVisible(false);
            deleteDepartmentFromDb(dept);
//            clearAllFields();
//            populateJobListingsTable(compDeptDir);
        }else{
            JOptionPane.showMessageDialog(this, "Deletion cancelled");
        }
        
    }
    
    public void deleteDepartmentFromDb(CompDepartment dept){
        try {
            String queryDelDept = "UPDATE job_listings SET visible = '0' WHERE "
                    + "id = '" + dept.getJobId() + "'";
            Statement st = conn.createStatement();
            st.executeUpdate(queryDelDept);   
            st.close();
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    



    public void getAllStudents(){
        try {
            String queryStudents = "SELECT * FROM uni_student";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(queryStudents);                
                while (rs.next())
                {
                    UniStudent student = uniStudents.addUniStudent();
                    student.setId(rs.getInt("id"));
                    student.setName(rs.getString("name"));
                    student.setSevisId(rs.getString("student_gov_id"));
                    student.setContactNo(rs.getLong("contact_no"));
                    student.setEmailId(rs.getString("email"));
                    student.setGpa(rs.getDouble("gpa"));
                    student.setIntake(rs.getString("intake"));
                    student.setSemester(rs.getInt("semester"));
                    student.setCourse(rs.getString("course"));
                    student.setJdWatchAccess(rs.getBoolean("jd_watch_eligible"));
                    student.setCountryOfOrigin(rs.getString("country_of_origin"));
                    
                    if(rs.getString("start_date") != null){
                        student.setStartDate(LocalDate.parse(rs.getString("start_date")));
                    }
                    if(rs.getString("end_date") != null){
                        student.setEndDate(LocalDate.parse(rs.getString("end_date")));
                    }
                    if(rs.getString("comments") != null){
                        student.setComments(rs.getString("comments"));
                    }
                    
                    UniDepartment department = uniDepartments.searchById(rs.getInt("uni_department_id"));
                    student.setDepartment(department);
                }
                st.close();
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void getAllUniversityData(){
         try {
                //Universities
                String queryUniversity = "SELECT * FROM university";
                Statement st = conn.createStatement();
                ResultSet rs = st.executeQuery(queryUniversity);                
                while (rs.next())
                {
                    University university = universities.addUniversity();
                    university.setId(rs.getInt("id"));
                    university.setName(rs.getString("name"));
                    university.setDistrict(rs.getString("district"));
                    university.setState(rs.getString("state"));
                    university.setCountry(rs.getString("country"));
                    university.setPincode(rs.getLong("pincode"));
                }
                st.close();

                //Colleges
                String queryCollege = "SELECT * FROM uni_college";
                Statement stCollege = conn.createStatement();
                ResultSet rsCollege = stCollege.executeQuery(queryCollege);                
                while (rsCollege.next())
                {
                    UniCollege college = uniColleges.addUniCollege();
                    college.setId(rsCollege.getInt("id"));
                    college.setName(rsCollege.getString("name"));

                    for(University uni : universities.getUniversityList()){
                        if(uni.getId() == rsCollege.getInt("university_id")){
                            college.setUniversity(uni);
                        }
                    }

                }
                stCollege.close();

                //Departments
                String queryDepartment = "SELECT * FROM uni_department";
                Statement stDepartment = conn.createStatement();
                ResultSet rsDepartment = stDepartment.executeQuery(queryDepartment);                
                while (rsDepartment.next())
                {
                    UniDepartment dept = uniDepartments.addUniDepartment();
                    dept.setId(rsDepartment.getInt("id"));
                    dept.setName(rsDepartment.getString("name"));

                    for(UniCollege college : uniColleges.getUniCollegeList()){
                        if(college.getId() == rsDepartment.getInt("uni_college_id")){
                            dept.setCollege(college);
                        }
                    }

                }
                stDepartment.close();

            } catch (SQLException ex) {
                System.out.println("An error occurred. Maybe user/password is invalid");
                ex.printStackTrace();
        }       
    }
    
    public void findAllJobAppsOfStudent(Company company){
        try {
            String queryStudents = "SELECT * FROM appointments WHERE company_id = '" + company.getId().toString() + "'";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(queryStudents);                
                while (rs.next())
                {
                    JobAppointments jobApp = jobAppDir.addJobAppointment();
                    
                    jobApp.setApplicationId(rs.getInt("application_id"));
                    jobApp.setSevisId(rs.getString("student_gov_id"));
                    jobApp.setCompanyId(rs.getInt("company_id"));
                    jobApp.setJobListingsId(rs.getInt("job_listings_id"));
                    jobApp.setDateApplied(LocalDate.parse(rs.getString("date_applied")));
                    if(rs.getString("status")!=null){
                        jobApp.setStatus(rs.getString("status"));
                    }
                    if(rs.getString("comments")!=null){
                        jobApp.setComments(rs.getString("comments"));
                    }
                }
                st.close();
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
//    public void populateStudentDetilsTable(JobAppointmentsDir jobAppDir){
//        DefaultTableModel tableModel = (DefaultTableModel) tblStudentDetails.getModel();
//        tableModel.setRowCount(0);
//        
//        for(JobAppointments jobApp : jobAppDir.getJobAppointmentsList()){
//            Object row[] = new Object[7];
//            row[0] = jobApp;
//            row[1] = jobApp.getJobListingsId().toString();
//            row[2] = uniStudents.searchBySevisId(jobApp.getSevisId()).getName();
//            row[3] = uniStudents.searchBySevisId(jobApp.getSevisId()).getDepartment().getCollege().getUniversity().getName();
//            row[4] = uniStudents.searchBySevisId(jobApp.getSevisId()).getCourse();
//            row[5] = uniStudents.searchBySevisId(jobApp.getSevisId()).getGpa().toString();
//            row[6] = jobApp.getStatus();
//            
//            tableModel.addRow(row);
//        }
//    }
    
//    public void viewJobAppointment(JobAppointments jobApp){
//        txtStudentName.setText(uniStudents.searchBySevisId(jobApp.getSevisId()).getName());
//        txtUniversity.setText(uniStudents.searchBySevisId(jobApp.getSevisId()).getDepartment().getCollege().getUniversity().getName());
//        txtApplicationDate.setText(jobApp.getDateApplied().toString());
//        ImageIcon myImg = retrieveImage(uniStudents.searchBySevisId(jobApp.getSevisId()));
//        lblImage.setText("");
//        lblImage.setIcon(myImg);
//        if(jobApp.getComments()!=null){
//            txtAreaComments.setText(jobApp.getComments());
//        }else{
//            txtAreaComments.setText("");
//        }
//        
//        if(jobApp.getStatus()!=null){
//            cmbStatus.setSelectedItem(jobApp.getStatus());
//        }else{
//            cmbStatus.setSelectedItem("");
//        }
//        
//    }
    
//    public void updateStatus(JobAppointments jobApp){
//        if(cmbStatus.getSelectedItem().toString().equalsIgnoreCase("Applied")){
//            JOptionPane.showMessageDialog(this, "Incorrect selection. Please try again.");
//            clearAllFieldsViewApplicants();
//        }else{
//            JobAppointments newJobApp = new JobAppointments();
//            newJobApp = jobApp;
//            newJobApp.setStatus(cmbStatus.getSelectedItem().toString());
//            newJobApp.setComments(txtAreaComments.getText());
//
//            jobAppDir.updateJobAppointment(jobApp, newJobApp);
//            if(cmbStatus.getSelectedItem().toString().equalsIgnoreCase("Accepted")){
//                saveJobAppUpdateToDb(newJobApp);
//                updateStudentJobAccess(newJobApp);
//                saveAcceptedJobToDb(newJobApp);
//            }else{
//                saveJobAppUpdateToDb(newJobApp);
//                updateStudentJobAccess(newJobApp);
//                deleteAcceptedJobToDb(newJobApp);
//            }
//            populateStudentDetilsTable(jobAppDir);
//            clearAllFieldsViewApplicants();
//        }
//    }
    
    public void saveJobAppUpdateToDb(JobAppointments jobApp){
        try {
            String queryUpdateJobApp = "UPDATE appointments SET status = '" + jobApp.getStatus() + "' , comments = '" + jobApp.getComments() + "' WHERE application_id = '"
                    + jobApp.getApplicationId().toString() + "'";
            Statement st = conn.createStatement();
            st.executeUpdate(queryUpdateJobApp);   
            st.close();
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void updateStudentJobAccess(JobAppointments jobApp){
        try {
            String jobAccess = "1";
            if(jobApp.getStatus().equalsIgnoreCase("Accepted")){
                jobAccess = "0";
            }
            String queryUpdateStudent = "UPDATE uni_student SET jd_watch_eligible = '"+jobAccess+"' WHERE student_gov_id = '"
                    + jobApp.getSevisId() + "'";
            Statement st = conn.createStatement();
            st.executeUpdate(queryUpdateStudent);   
            st.close();
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
//    public void saveAcceptedJobToDb(JobAppointments jobApp){
//        try {
//            String queryNewDepartment = "INSERT into accepted_jobs (job_listings_id, student_gov_id, company_id, company_name, expected_grad_date, start_date, position, salary, course, job_title, nationality, level, role, student_name, university, gov_status, gov_issues, location) VALUES "
//                    + "('"+ jobApp.getJobListingsId().toString() + "', '"  + jobApp.getSevisId() + "' , '" + jobApp.getCompanyId().toString() + "' "
//                    + ", '" + selectedComp.getName() + "' , '" + getExpectedEndDate(uniStudents.searchBySevisId(jobApp.getSevisId())).toString() + "' , '" + compDeptDir.searchByJobId(jobApp.getJobListingsId()).getStartDate().toString() + "' , '" + compDeptDir.searchByJobId(jobApp.getJobListingsId()).getPosition() + "' "
//                    + ", '" + compDeptDir.searchByJobId(jobApp.getJobListingsId()).getSalaryPerHr().toString() + "' , '" + uniStudents.searchBySevisId(jobApp.getSevisId()).getCourse() + "' , '" + compDeptDir.searchByJobId(jobApp.getJobListingsId()).getTitle() + "', '"+ uniStudents.searchBySevisId(jobApp.getSevisId()).getCountryOfOrigin() +"' , '"+ compDeptDir.searchByJobId(jobApp.getJobListingsId()).getLevel() +"' , '" + compDeptDir.searchByJobId(jobApp.getJobListingsId()).getRole() + "' , '" + uniStudents.searchBySevisId(jobApp.getSevisId()).getName() + "' , '" + uniStudents.searchBySevisId(jobApp.getSevisId()).getDepartment().getCollege().getUniversity().getName() + "' , 'Pending with HR' , 'Pending Gov. Approval' , '" + compDeptDir.searchByJobId(jobApp.getJobListingsId()).getLocation() + "')";
//            Statement st = conn.createStatement();
//            st.executeUpdate(queryNewDepartment); 
//            st.close();
//            
//            compDeptDir.removeAllCompDepartment();
//            getAllDepartments();
////            populateJobListingsTable(compDeptDir);
////            clearAllFields();
//        
//        } catch (SQLException ex) {
//            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
//        }
//    }
    
    public void deleteAcceptedJobToDb(JobAppointments jobApp){
        try {
            String queryNewDepartment = "DELETE from accepted_jobs WHERE job_listings_id = '" + jobApp.getJobListingsId().toString() + "' AND student_gov_id = '"+ jobApp.getSevisId() +"' AND company_id = '" + jobApp.getCompanyId().toString() + "'";
            Statement st = conn.createStatement();
            st.executeUpdate(queryNewDepartment); 
            st.close();
            
            compDeptDir.removeAllCompDepartment();
//            getAllDepartments();
//            populateJobListingsTable(compDeptDir);
//            clearAllFields();
        
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public LocalDate getExpectedEndDate(UniStudent student){
        LocalDate today = LocalDate.now();
        Integer month = today.getMonthValue();
        Integer year = today.getYear();
        
        LocalDate expectedStart = LocalDate.now();
        if(student.getSemester()==1){
            Integer monthsAdv = ((month + 9) % 12) / 4;
            Integer yearAdv = year;
            if(month >= 9){
                yearAdv+=1;
            }
            if(monthsAdv == 0){
                String expectedStartStr = yearAdv.toString() + "-04-30";
                expectedStart = LocalDate.parse(expectedStartStr);
            }else if(monthsAdv == 1){
                String expectedStartStr = yearAdv.toString() + "-08-31";
                expectedStart = LocalDate.parse(expectedStartStr);
            }else{
                String expectedStartStr = yearAdv.toString() + "-12-31";
                expectedStart = LocalDate.parse(expectedStartStr);
            }
        }else if(student.getSemester()==2){
            Integer monthsAdv = ((month + 6) % 12) / 4;
            Integer yearAdv = year;
            if(month >= 9){
                yearAdv+=1;
            }
            if(monthsAdv == 0){
                String expectedStartStr = yearAdv.toString() + "-04-30";
                expectedStart = LocalDate.parse(expectedStartStr);
            }else if(monthsAdv == 1){
                String expectedStartStr = yearAdv.toString() + "-08-31";
                expectedStart = LocalDate.parse(expectedStartStr);
            }else{
                String expectedStartStr = yearAdv.toString() + "-12-31";
                expectedStart = LocalDate.parse(expectedStartStr);
            }
        }else if(student.getSemester()==3){
            Integer monthsAdv = ((month + 3) % 12) / 4;
            Integer yearAdv = year;
            if(month >= 9){
                yearAdv+=1;
            }
            if(monthsAdv == 0){
                String expectedStartStr = yearAdv.toString() + "-04-30";
                expectedStart = LocalDate.parse(expectedStartStr);
            }else if(monthsAdv == 1){
                String expectedStartStr = yearAdv.toString() + "-08-31";
                expectedStart = LocalDate.parse(expectedStartStr);
            }else{
                String expectedStartStr = yearAdv.toString() + "-12-31";
                expectedStart = LocalDate.parse(expectedStartStr);
            }
        }else{
            Integer monthsAdv = ((month - 1) % 12) / 4;
            Integer yearAdv = year;
            
            if(monthsAdv == 0){
                String expectedStartStr = yearAdv.toString() + "-04-30";
                expectedStart = LocalDate.parse(expectedStartStr);
            }else if(monthsAdv == 1){
                String expectedStartStr = yearAdv.toString() + "-08-31";
                expectedStart = LocalDate.parse(expectedStartStr);
            }else{
                String expectedStartStr = yearAdv.toString() + "-12-31";
                expectedStart = LocalDate.parse(expectedStartStr);
            }
        }
        return expectedStart;
    }
    
     
    public ImageIcon retrieveImage(UniStudent myStudent){
        ImageIcon uploadedImage=null;
        ImageIcon scaledImageIcon=null;
        try{ Statement st = conn.createStatement();
                String query = "SELECT photos FROM photos WHERE student_id="+myStudent.getId();
                ResultSet rs = st.executeQuery(query); // retrieve photo
                int count=0;
                
//                System.out.println(count);
                
                while (rs.next()) // retrieve photo
                {
                    count++;
//                  int id = rs.getInt("id");
                    String filename = "retCapture"+".png";
                  try(FileOutputStream fos = new FileOutputStream(filename)){
                      Blob blob = rs.getBlob("photos");
                      int len = (int) blob.length();
                      byte[] buf = blob.getBytes(1, len);
                      fos.write(buf,0,len);
                      
                uploadedImage = new ImageIcon(filename);
                Image image1 = uploadedImage.getImage();
                Image scaledImage = image1.getScaledInstance(120, 120,  java.awt.Image.SCALE_SMOOTH);
                scaledImageIcon = new ImageIcon(scaledImage);
                  }catch(IOException ex){
                      Logger lgr =Logger.getLogger(UniStudentJPanel.class.getName());
                      lgr.log(Level.SEVERE,ex.getMessage(),ex);
                  }
                  
                  
                }
                st.close();

                if (conn != null) {
                    System.out.println("Connected to the database test1");

                    
                }
                
            } catch (SQLException ex) {
            System.out.println("An error occurred. Maybe user/password is invalid");
            ex.printStackTrace();
        }
        return scaledImageIcon;
    }
    
    public void createPieChart(){
    
        DataConnection data = new DataConnection(conn);
        Integer count =-20;
        
        ArrayList<HashMap<String,Integer>> myInp = data.dataConn();
//        for(HashMap<String,Integer> myInp:myInput){
        HashMap<String,Integer> myInp1 = new HashMap<>();
        HashMap<String,Integer> myInp2 = new HashMap<>();
        myInp1 = myInp.get(0);
        myInp2 = myInp.get(1);
        for (String myKey:myInp1.keySet()){
            count+=10;
            
            pieChartNationality.addItem(new ModelPolarAreaChart(new Color((int) ((Math.random() * (255 - 0)) + 0), (int) ((Math.random() * (255 - 0)) + 0), (int) ((Math.random() * (255 - 0)) + 0)), myKey, myInp1.get(myKey)));
            
        }
        for (String myKey:myInp2.keySet()){
            count+=10;
            
            
            pieChartRate.addItem(new ModelPolarAreaChart(new Color((int) ((Math.random() * (255 - 0)) + 0), (int) ((Math.random() * (255 - 0)) + 0), (int) ((Math.random() * (255 - 0)) + 0)), myKey, myInp2.get(myKey)));
        }
//        }
        pieChartNationality.start();
        pieChartRate.start();
        
    
    }
    
}
