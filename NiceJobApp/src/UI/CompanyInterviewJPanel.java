/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Image;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JSplitPane;
import model.CompDepartment;
import model.CompDepartmentDir;
import model.Company;
import model.CompanyDir;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import model.Government;
import model.GovernmentDir;
import model.JobAppointments;
import model.JobAppointmentsDir;
import model.UniCollege;
import model.UniCollegeDir;
import model.UniDepartment;
import model.UniDepartmentDir;
import model.UniStudent;
import model.UniStudentDir;
import model.University;
import model.UniversityDir;

/**
 *
 * @author Aditya, Ameya, Nainil
 */
public class CompanyInterviewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form Choice_JPanel
     */
    JSplitPane splitPane;
    Connection conn = null;
    String choice = "";
    CompDepartmentDir compDeptDir = new CompDepartmentDir();
    CompanyDir compDir = new CompanyDir();
    Integer selectedRow = -1;
    Integer selectedRowStudent = -1;
    Company selectedComp = null;
    UniStudentDir uniStudents = new UniStudentDir();
    UniCollegeDir uniColleges = new UniCollegeDir();
    UniversityDir universities = new UniversityDir();
    UniDepartmentDir uniDepartments = new UniDepartmentDir();
    JobAppointmentsDir jobAppDir = new JobAppointmentsDir(); 
    JobAppointments selectedJob = new JobAppointments();
    GovernmentDir govDir = new GovernmentDir(); 
    Government selectedGov = new Government();
    
    
    public CompanyInterviewJPanel(JSplitPane splitPaneMain,Connection conn,Company selectedComp) {
        this.conn = conn;
        initComponents();
        
        splitPane = splitPaneMain;
        
        this.selectedComp = selectedComp;
        getAllDepartments();
//        populateJobListingsTable(compDeptDir);
//        clearAllFields();
        getAllUniversityData();
        getAllStudents();
        findAllJobAppsOfStudent(selectedComp);
        populateStudentDetilsTable(jobAppDir);
//        Test test = new Test();
//        test.setVisible(true);
        
        tblStudentDetails.getTableHeader().setFont( new Font( "Trebuchet MS" , Font.PLAIN, 18 ));
//        createPieChart();
//        Charts charts2 = new Charts(conn);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dateChooser2 = new com.raven.datechooser.DateChooser();
        kGradientPanel2 = new keeptoo.KGradientPanel();
        txtUniversity = new javax.swing.JTextField();
        lblPersonalDetails = new javax.swing.JLabel();
        lblInterviewPanel = new javax.swing.JLabel();
        lblStudentName = new javax.swing.JLabel();
        btnUpdate = new button.Button();
        lblUniversity = new javax.swing.JLabel();
        txtStudentName = new javax.swing.JTextField();
        lblAppDate = new javax.swing.JLabel();
        txtApplicationDate = new javax.swing.JTextField();
        lblPhoto = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblStudentDetails = new javax.swing.JTable();
        btnSearch = new button.Button();
        btnClear = new button.Button();
        btnViewSelected = new button.Button();
        lblStatus = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox<>();
        lblComments = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaComments = new javax.swing.JTextArea();
        btnRefreshTable = new button.Button();
        lblApplicationDetails = new javax.swing.JLabel();
        btnLogout = new button.Button();
        lblImage = new javax.swing.JLabel();

        dateChooser2.setDateFormat("yyyy-MM-dd");

        setPreferredSize(new java.awt.Dimension(1000, 630));

        kGradientPanel2.setkEndColor(new java.awt.Color(255, 204, 255));
        kGradientPanel2.setkStartColor(new java.awt.Color(204, 255, 204));
        kGradientPanel2.setPreferredSize(new java.awt.Dimension(1000, 630));

        txtUniversity.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        txtUniversity.setEnabled(false);

        lblPersonalDetails.setFont(new java.awt.Font("Trebuchet MS", 1, 22)); // NOI18N
        lblPersonalDetails.setText("Personal Details");

        lblInterviewPanel.setFont(new java.awt.Font("Trebuchet MS", 1, 30)); // NOI18N
        lblInterviewPanel.setText("JOB INTERVIEW PANEL");

        lblStudentName.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        lblStudentName.setText("Student Name");

        btnUpdate.setText("Update");
        btnUpdate.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        lblUniversity.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        lblUniversity.setText("University");

        txtStudentName.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        txtStudentName.setEnabled(false);

        lblAppDate.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        lblAppDate.setText("Application Date");

        txtApplicationDate.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        txtApplicationDate.setEnabled(false);

        lblPhoto.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        lblPhoto.setText("Photo");

        tblStudentDetails.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        tblStudentDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Application No", "Job Listing Id", "Student Name", "University", "Course", "GPA", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(tblStudentDetails);

        btnSearch.setBackground(new java.awt.Color(204, 255, 204));
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icon_7.png"))); // NOI18N
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnClear.setBackground(new java.awt.Color(204, 255, 204));
        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icon_8.png"))); // NOI18N
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnViewSelected.setBackground(new java.awt.Color(204, 255, 204));
        btnViewSelected.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icon_9.png"))); // NOI18N
        btnViewSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewSelectedActionPerformed(evt);
            }
        });

        lblStatus.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        lblStatus.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblStatus.setText("Status");

        cmbStatus.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Applied", "Interview Scheduled", "Accepted", "On-Hold", "Rejected" }));

        lblComments.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        lblComments.setText("Comments");

        txtAreaComments.setColumns(20);
        txtAreaComments.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        txtAreaComments.setRows(5);
        jScrollPane2.setViewportView(txtAreaComments);

        btnRefreshTable.setBackground(new java.awt.Color(204, 255, 204));
        btnRefreshTable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icon_4.png"))); // NOI18N
        btnRefreshTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshTableActionPerformed(evt);
            }
        });

        lblApplicationDetails.setFont(new java.awt.Font("Trebuchet MS", 1, 22)); // NOI18N
        lblApplicationDetails.setText("Application Details");

        btnLogout.setBackground(new java.awt.Color(204, 204, 255));
        btnLogout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icon_3.png"))); // NOI18N
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        lblImage.setBackground(new java.awt.Color(150, 150, 150));
        lblImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImage.setText("No Image");
        lblImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout kGradientPanel2Layout = new javax.swing.GroupLayout(kGradientPanel2);
        kGradientPanel2.setLayout(kGradientPanel2Layout);
        kGradientPanel2Layout.setHorizontalGroup(
            kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kGradientPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane6)
                        .addContainerGap())
                    .addGroup(kGradientPanel2Layout.createSequentialGroup()
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 920, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel2Layout.createSequentialGroup()
                        .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(kGradientPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblStudentName)
                                    .addComponent(lblPhoto)
                                    .addComponent(lblUniversity))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtStudentName)
                                        .addComponent(txtUniversity, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE))
                                    .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(108, 108, 108))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, kGradientPanel2Layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(btnRefreshTable, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 378, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, kGradientPanel2Layout.createSequentialGroup()
                                .addGap(193, 193, 193)
                                .addComponent(lblPersonalDetails)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 175, Short.MAX_VALUE)))
                        .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(kGradientPanel2Layout.createSequentialGroup()
                                .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(kGradientPanel2Layout.createSequentialGroup()
                                        .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblStatus, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblComments, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblAppDate))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(cmbStatus, javax.swing.GroupLayout.Alignment.LEADING, 0, 185, Short.MAX_VALUE)
                                            .addComponent(txtApplicationDate, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                        .addGap(53, 53, 53))
                                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(1, 1, 1)
                                .addComponent(btnViewSelected, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel2Layout.createSequentialGroup()
                                .addComponent(lblApplicationDetails)
                                .addGap(172, 172, 172))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel2Layout.createSequentialGroup()
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(64, 64, 64))))))
            .addGroup(kGradientPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(lblInterviewPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        kGradientPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnClear, btnSearch, btnViewSelected});

        kGradientPanel2Layout.setVerticalGroup(
            kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel2Layout.createSequentialGroup()
                .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblInterviewPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnViewSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRefreshTable, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPersonalDetails)
                    .addComponent(lblApplicationDetails))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtApplicationDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAppDate)
                    .addComponent(txtStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStudentName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUniversity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUniversity))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kGradientPanel2Layout.createSequentialGroup()
                        .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblComments)
                            .addComponent(lblPhoto))
                        .addGap(44, 44, 44)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(65, Short.MAX_VALUE))
        );

        kGradientPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnClear, btnSearch, btnViewSelected});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshTableActionPerformed
        // TODO add your handling code here:
        populateStudentDetilsTable(jobAppDir);
    }//GEN-LAST:event_btnRefreshTableActionPerformed

    private void btnViewSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewSelectedActionPerformed
        // TODO add your handling code here:
        selectedRowStudent = tblStudentDetails.getSelectedRow();
        if(selectedRowStudent < 0){
            JOptionPane.showMessageDialog(this, "Please select a row");
            return;
        }else{
            DefaultTableModel tableModel = (DefaultTableModel) tblStudentDetails.getModel();
            JobAppointments jobApp = (JobAppointments) tableModel.getValueAt(selectedRowStudent, 0);
            viewJobAppointment(jobApp);
            selectedJob = jobApp;
        }
    }//GEN-LAST:event_btnViewSelectedActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        clearAllFieldsViewApplicants();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        JPanel panel = new JPanel(new GridLayout(0, 1));
        panel.add(new JLabel("Please select a field:"));
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.addElement("University");
        model.addElement("Status");

        JComboBox comboBox = new JComboBox(model);
        panel.add(comboBox);

        int resultField = JOptionPane.showConfirmDialog(null, panel, "Search by Field", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        if(resultField == JOptionPane.OK_OPTION){
            String fieldSelected = comboBox.getSelectedItem().toString();
            DefaultComboBoxModel status = new DefaultComboBoxModel();

            status.addElement("Applied");
            status.addElement("Interview Scheduled");
            status.addElement("Accepted");
            status.addElement("Rejected");

            JComboBox comboBoxStatus = new JComboBox(status);

            DefaultComboBoxModel uni = new DefaultComboBoxModel();
            for(University univ : universities.getUniversityList()){
                uni.addElement(univ.getName());
            }

            JComboBox comboBoxUni = new JComboBox(uni);

            panel.add(new JLabel("Value:"));

            if(fieldSelected.equalsIgnoreCase("University")){
                comboBox.setEnabled(false);
                panel.add(comboBoxUni);
            }else if(fieldSelected.equalsIgnoreCase("Status")){
                comboBox.setEnabled(false);
                panel.add(comboBoxStatus);
            }else{

            }

            int resultValue = JOptionPane.showConfirmDialog(null, panel, "Search by Field", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(resultValue == JOptionPane.OK_OPTION) {

                String fieldValue;
                if(fieldSelected.equalsIgnoreCase("University")){
                    fieldValue = comboBoxUni.getSelectedItem().toString();
                } else if(fieldSelected.equalsIgnoreCase("Status")){
                    fieldValue = comboBoxStatus.getSelectedItem().toString();
                } else {
                    fieldValue = "";
                }

                if(fieldValue.equalsIgnoreCase("")){
                    JOptionPane.showMessageDialog(this, "Please enter a value");
                }else{
                    JobAppointmentsDir resultJobAppDir = new JobAppointmentsDir();
                    ArrayList<JobAppointments> resultJobApps = new ArrayList<JobAppointments>();

                    if(fieldSelected.equalsIgnoreCase("Status")){
                        resultJobApps = jobAppDir.searchByStatus(fieldValue);
                    }else if(fieldSelected.equalsIgnoreCase("University")){
                        resultJobApps = jobAppDir.searchByUniversity(fieldValue, uniStudents);
                    }else{
                    }

                    if(resultJobApps.isEmpty()){
                        JOptionPane.showMessageDialog(this, "No Results Found");
                        populateStudentDetilsTable(jobAppDir);
                    }else{
                        JOptionPane.showMessageDialog(this, "Entries found");
                        resultJobAppDir.setJobAppointmentsList(resultJobApps);
                        populateStudentDetilsTable(resultJobAppDir);
                    }
                }
            }else{
                JOptionPane.showMessageDialog(this, "Search Cancelled");
            }
        }else{
            JOptionPane.showMessageDialog(this, "Search Cancelled");
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        updateStatus(selectedJob);
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        int res = JOptionPane.showConfirmDialog(null, "Are you sure you want to logout?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE);
        if(res == 0) {
            CompanyLoginJPanel choicePanel = new CompanyLoginJPanel(splitPane, conn);
            splitPane.setRightComponent(choicePanel);
        }
        else{
            //Pressed No
        }     
    }//GEN-LAST:event_btnLogoutActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private button.Button btnClear;
    private button.Button btnLogout;
    private button.Button btnRefreshTable;
    private button.Button btnSearch;
    private button.Button btnUpdate;
    private button.Button btnViewSelected;
    private javax.swing.JComboBox<String> cmbStatus;
    private com.raven.datechooser.DateChooser dateChooser2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private keeptoo.KGradientPanel kGradientPanel2;
    private javax.swing.JLabel lblAppDate;
    private javax.swing.JLabel lblApplicationDetails;
    private javax.swing.JLabel lblComments;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblInterviewPanel;
    private javax.swing.JLabel lblPersonalDetails;
    private javax.swing.JLabel lblPhoto;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblStudentName;
    private javax.swing.JLabel lblUniversity;
    private javax.swing.JTable tblStudentDetails;
    private javax.swing.JTextField txtApplicationDate;
    private javax.swing.JTextArea txtAreaComments;
    private javax.swing.JTextField txtStudentName;
    private javax.swing.JTextField txtUniversity;
    // End of variables declaration//GEN-END:variables
    
    public void getAllDepartments(){
        try {
            String queryDepartments = "SELECT * FROM job_listings WHERE company_name='"+selectedComp.getName()+"'";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(queryDepartments); 
                while (rs.next())
                {
                    
                    CompDepartment dept = compDeptDir.addCompDepartment();
                    
                    dept.setJobId(rs.getInt("id"));
                    dept.setCompany(selectedComp);                 
                    dept.setJobDescription(rs.getString("job_description"));
                    dept.setLevel(rs.getString("level"));
                    dept.setLocation(rs.getString("location"));
                    dept.setPosition(rs.getString("position"));
                    dept.setRole(rs.getString("role"));
                    dept.setSalaryPerHr(rs.getDouble("salary_offered"));
                    dept.setStartDate(LocalDate.parse(rs.getString("start_date")));
                    dept.setTitle(rs.getString("job_title"));
                    dept.setVisible(rs.getBoolean("visible"));
                    
                    
                }
                st.close();
//                stCompany.close();
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
//    public void populateJobListingsTable(CompDepartmentDir compDepartmentDir){
//        DefaultTableModel tableModel = (DefaultTableModel) tblJobListings.getModel();
//        tableModel.setRowCount(0);
//        
//        for(CompDepartment dept : compDepartmentDir.getCompDepartmentList()){
//            if(dept.getVisible()){
//                Object row[] = new Object[8];
//                row[0] = dept;
//                row[1] = dept.getTitle();
//                row[2] = dept.getLocation();
//                row[3] = dept.getRole();
//                row[4] = dept.getLevel();
//                row[5] = dept.getPosition();
//                row[6] = dept.getStartDate().toString();
//                row[7] = dept.getSalaryPerHr().toString();
//                tableModel.addRow(row);
//            }
//        }
//    }
    
//    public void updateDepartment(CompDepartment oldDept){
//        CompDepartment newDept = new CompDepartment();
//        newDept = oldDept;
//        
//        newDept.setStartDate(LocalDate.parse(txtStartDate.getText()));
//        newDept.setJobDescription(txtAreaJobDescription.getText());
//        newDept.setLevel(cmbLevel.getSelectedItem().toString());
//        newDept.setLocation(cmbLocation.getSelectedItem().toString());
//        newDept.setPosition(cmbPosition.getSelectedItem().toString());
//        newDept.setRole(cmbRole.getSelectedItem().toString());
//        newDept.setTitle(txtJobTitle.getText());
//        newDept.setSalaryPerHr(Double.parseDouble(txtSalaryOffered.getText()));
//        compDeptDir.updateCompDepartment(oldDept, newDept);
//        
//        updateDepartmentToDb(oldDept, newDept);
//        clearAllFields();
//        populateJobListingsTable(compDeptDir);
//    }
    
    public void updateDepartmentToDb(CompDepartment oldCompDepartment, CompDepartment newCompDepartment){
        try {
            
            String queryNewDept = "UPDATE job_listings SET role = '" + newCompDepartment.getRole() + "' , level = '" + newCompDepartment.getLevel() + "'"
                    + ", position = '" + newCompDepartment.getPosition()+ "', job_description = '" + newCompDepartment.getJobDescription() 
                    + "', job_title = '" + newCompDepartment.getTitle()+  "', start_date = '" + newCompDepartment.getStartDate().toString()
                    + "', salary_offered = '" + newCompDepartment.getSalaryPerHr()
                    + "', location = '" + newCompDepartment.getLocation()+ "' WHERE id='"
                    + oldCompDepartment.getJobId()+ "'";
            Statement st = conn.createStatement();
            st.executeUpdate(queryNewDept);   
            st.close();
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
//    public void saveDepartmentDetails(){
//        if( txtJobTitle.getText().equalsIgnoreCase("") || txtAreaJobDescription.getText().equalsIgnoreCase("") || 
//                txtSalaryOffered.getText().equalsIgnoreCase("") || txtStartDate.getText().equalsIgnoreCase("")
//                ){
//            JOptionPane.showMessageDialog(this, "Please fill all fields");
//        }else{
//                CompDepartment newDept = compDeptDir.addCompDepartment();
//                
//                newDept.setStartDate(LocalDate.parse(txtStartDate.getText()));
//                newDept.setJobDescription(txtAreaJobDescription.getText());
//                newDept.setLevel(cmbLevel.getSelectedItem().toString());
//                newDept.setLocation(cmbLocation.getSelectedItem().toString());
//                newDept.setPosition(cmbPosition.getSelectedItem().toString());
//                newDept.setRole(cmbRole.getSelectedItem().toString());
//                newDept.setTitle(txtJobTitle.getText());
//                newDept.setSalaryPerHr(Double.parseDouble(txtSalaryOffered.getText()));
//                newDept.setVisible(true);
//                
//                saveDepartmentToDb(newDept);
//                clearAllFields();
//                populateJobListingsTable(compDeptDir);
//                
//            }
//           
//    }
    
    public void saveDepartmentToDb(CompDepartment department){
        try {
            String queryNewDepartment = "INSERT into job_listings (company_name, role, level, position, job_description, job_title, start_date, salary_offered, location, visible) VALUES "
                    + "('"+ selectedComp.getName()+ "', '"  + department.getRole()+ "' , '" + department.getLevel() + "' "
                    + ", '" + department.getPosition()+ "' , '" + department.getJobDescription()+ "' , '" + department.getTitle()+ "' , '" + department.getStartDate().toString() + "' "
                    + ", '" + department.getSalaryPerHr().toString() + "' , '" + department.getLocation() + "' , '1' )";
            Statement st = conn.createStatement();
            st.executeUpdate(queryNewDepartment); 
            st.close();
            
            compDeptDir.removeAllCompDepartment();
            getAllDepartments();
//            populateJobListingsTable(compDeptDir);
//            clearAllFields();
        
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void deleteDepartment(CompDepartment dept){
        int result = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this entry?", "Confirm Deletion", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        if(result == JOptionPane.OK_OPTION ){
//            compDeptDir.deleteCompDepartment(dept);
            CompDepartment newDept = new CompDepartment();
            newDept = dept;
            newDept.setVisible(false);
            deleteDepartmentFromDb(dept);
//            clearAllFields();
//            populateJobListingsTable(compDeptDir);
        }else{
            JOptionPane.showMessageDialog(this, "Deletion cancelled");
        }
        
    }
    
    public void deleteOtherJobAppStudent(JobAppointments newJobApp){
        try {
            String queryDelDept = "DELETE FROM appointments WHERE "
                    + "student_gov_id = '" + newJobApp.getSevisId() + "' AND status != 'Accepted'";
            Statement st = conn.createStatement();
            st.executeUpdate(queryDelDept);   
            st.close();
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void deleteDepartmentFromDb(CompDepartment dept){
        try {
            String queryDelDept = "UPDATE job_listings SET visible = '0' WHERE "
                    + "id = '" + dept.getJobId() + "'";
            Statement st = conn.createStatement();
            st.executeUpdate(queryDelDept);   
            st.close();
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
//    public void displayDepartment(CompDepartment dept){
//        
//        txtAreaJobDescription.setText(dept.getJobDescription());
//        txtSalaryOffered.setText(dept.getSalaryPerHr().toString());
//        txtStartDate.setText(dept.getStartDate().toString());
//        txtJobTitle.setText(dept.getTitle());
//        
//        cmbLevel.setSelectedItem(dept.getLevel());
//        cmbLocation.setSelectedItem(dept.getLocation());
//        cmbPosition.setSelectedItem(dept.getPosition());
//        cmbRole.setSelectedItem(dept.getRole());
//
//    }
    
//    public void clearAllFields(){
//        txtAreaJobDescription.setText("");
//        txtStartDate.setText("");
//        txtJobTitle.setText("");
//        txtSalaryOffered.setText("");
//        
//    }

    public void clearAllFieldsViewApplicants(){
        txtStudentName.setText("");
        txtUniversity.setText("");
        txtApplicationDate.setText("");
        txtAreaComments.setText("");
        lblImage.setIcon(null);
        lblImage.setText("No image");
        cmbStatus.setSelectedIndex(0);
    }

    public void getAllStudents(){
        try {
            String queryStudents = "SELECT * FROM uni_student";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(queryStudents);                
                while (rs.next())
                {
                    UniStudent student = uniStudents.addUniStudent();
                    student.setId(rs.getInt("id"));
                    student.setName(rs.getString("name"));
                    student.setSevisId(rs.getString("student_gov_id"));
                    student.setContactNo(rs.getLong("contact_no"));
                    student.setEmailId(rs.getString("email"));
                    student.setGpa(rs.getDouble("gpa"));
                    student.setIntake(rs.getString("intake"));
                    student.setSemester(rs.getInt("semester"));
                    student.setCourse(rs.getString("course"));
                    student.setJdWatchAccess(rs.getBoolean("jd_watch_eligible"));
                    student.setCountryOfOrigin(rs.getString("country_of_origin"));
                    
                    if(rs.getString("start_date") != null){
                        student.setStartDate(LocalDate.parse(rs.getString("start_date")));
                    }
                    if(rs.getString("end_date") != null){
                        student.setEndDate(LocalDate.parse(rs.getString("end_date")));
                    }
                    if(rs.getString("comments") != null){
                        student.setComments(rs.getString("comments"));
                    }
                    
                    UniDepartment department = uniDepartments.searchById(rs.getInt("uni_department_id"));
                    student.setDepartment(department);
                }
                st.close();
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void getAllUniversityData(){
         try {
                //Universities
                String queryUniversity = "SELECT * FROM university";
                Statement st = conn.createStatement();
                ResultSet rs = st.executeQuery(queryUniversity);                
                while (rs.next())
                {
                    University university = universities.addUniversity();
                    university.setId(rs.getInt("id"));
                    university.setName(rs.getString("name"));
                    university.setDistrict(rs.getString("district"));
                    university.setState(rs.getString("state"));
                    university.setCountry(rs.getString("country"));
                    university.setPincode(rs.getLong("pincode"));
                }
                st.close();

                //Colleges
                String queryCollege = "SELECT * FROM uni_college";
                Statement stCollege = conn.createStatement();
                ResultSet rsCollege = stCollege.executeQuery(queryCollege);                
                while (rsCollege.next())
                {
                    UniCollege college = uniColleges.addUniCollege();
                    college.setId(rsCollege.getInt("id"));
                    college.setName(rsCollege.getString("name"));

                    for(University uni : universities.getUniversityList()){
                        if(uni.getId() == rsCollege.getInt("university_id")){
                            college.setUniversity(uni);
                        }
                    }

                }
                stCollege.close();

                //Departments
                String queryDepartment = "SELECT * FROM uni_department";
                Statement stDepartment = conn.createStatement();
                ResultSet rsDepartment = stDepartment.executeQuery(queryDepartment);                
                while (rsDepartment.next())
                {
                    UniDepartment dept = uniDepartments.addUniDepartment();
                    dept.setId(rsDepartment.getInt("id"));
                    dept.setName(rsDepartment.getString("name"));

                    for(UniCollege college : uniColleges.getUniCollegeList()){
                        if(college.getId() == rsDepartment.getInt("uni_college_id")){
                            dept.setCollege(college);
                        }
                    }

                }
                stDepartment.close();

            } catch (SQLException ex) {
                System.out.println("An error occurred. Maybe user/password is invalid");
                ex.printStackTrace();
        }       
    }
    
    public void findAllJobAppsOfStudent(Company company){
        try {
            String queryStudents = "SELECT * FROM appointments WHERE company_id = '" + company.getId().toString() + "'";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(queryStudents);                
                while (rs.next())
                {
                    JobAppointments jobApp = jobAppDir.addJobAppointment();
                    
                    jobApp.setApplicationId(rs.getInt("application_id"));
                    jobApp.setSevisId(rs.getString("student_gov_id"));
                    jobApp.setCompanyId(rs.getInt("company_id"));
                    jobApp.setJobListingsId(rs.getInt("job_listings_id"));
                    jobApp.setDateApplied(LocalDate.parse(rs.getString("date_applied")));
                    if(rs.getString("status")!=null){
                        jobApp.setStatus(rs.getString("status"));
                    }
                    if(rs.getString("comments")!=null){
                        jobApp.setComments(rs.getString("comments"));
                    }
                }
                st.close();
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void populateStudentDetilsTable(JobAppointmentsDir jobAppDir){
        DefaultTableModel tableModel = (DefaultTableModel) tblStudentDetails.getModel();
        tableModel.setRowCount(0);
        
        for(JobAppointments jobApp : jobAppDir.getJobAppointmentsList()){
            Object row[] = new Object[7];
            row[0] = jobApp;
            row[1] = jobApp.getJobListingsId().toString();
            row[2] = uniStudents.searchBySevisId(jobApp.getSevisId()).getName();
            row[3] = uniStudents.searchBySevisId(jobApp.getSevisId()).getDepartment().getCollege().getUniversity().getName();
            row[4] = uniStudents.searchBySevisId(jobApp.getSevisId()).getCourse();
            row[5] = uniStudents.searchBySevisId(jobApp.getSevisId()).getGpa().toString();
            row[6] = jobApp.getStatus();
            
            tableModel.addRow(row);
        }
    }
    
    public void viewJobAppointment(JobAppointments jobApp){
        txtStudentName.setText(uniStudents.searchBySevisId(jobApp.getSevisId()).getName());
        txtUniversity.setText(uniStudents.searchBySevisId(jobApp.getSevisId()).getDepartment().getCollege().getUniversity().getName());
        txtApplicationDate.setText(jobApp.getDateApplied().toString());
        ImageIcon myImg = retrieveImage(uniStudents.searchBySevisId(jobApp.getSevisId()));
        lblImage.setText("");
        lblImage.setIcon(myImg);
        if(jobApp.getComments()!=null){
            txtAreaComments.setText(jobApp.getComments());
        }else{
            txtAreaComments.setText("");
        }
        
        if(jobApp.getStatus()!=null){
            cmbStatus.setSelectedItem(jobApp.getStatus());
        }else{
            cmbStatus.setSelectedItem("");
        }
        
    }
    
    public void updateStatus(JobAppointments jobApp){
        if(cmbStatus.getSelectedItem().toString().equalsIgnoreCase("Applied")){
            JOptionPane.showMessageDialog(this, "Incorrect selection. Please try again.");
            clearAllFieldsViewApplicants();
        }else{
            JobAppointments newJobApp = new JobAppointments();
            newJobApp = jobApp;
            newJobApp.setStatus(cmbStatus.getSelectedItem().toString());
            newJobApp.setComments(txtAreaComments.getText());

            jobAppDir.updateJobAppointment(jobApp, newJobApp);
            if(cmbStatus.getSelectedItem().toString().equalsIgnoreCase("Accepted")){
                saveJobAppUpdateToDb(newJobApp);
                deleteOtherJobAppStudent(newJobApp);
                jobAppDir.clearAllJobApps();
                findAllJobAppsOfStudent(selectedComp);
                updateStudentJobAccess(newJobApp);
                saveAcceptedJobToDb(newJobApp);
            }else{
                saveJobAppUpdateToDb(newJobApp);
                updateStudentJobAccess(newJobApp);
                deleteAcceptedJobToDb(newJobApp);
            }
            populateStudentDetilsTable(jobAppDir);
            clearAllFieldsViewApplicants();
        }
    }
    
    public void saveJobAppUpdateToDb(JobAppointments jobApp){
        try {
            String queryUpdateJobApp = "UPDATE appointments SET status = '" + jobApp.getStatus() + "' , comments = '" + jobApp.getComments() + "' WHERE application_id = '"
                    + jobApp.getApplicationId().toString() + "'";
            Statement st = conn.createStatement();
            st.executeUpdate(queryUpdateJobApp);   
            st.close();
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void updateStudentJobAccess(JobAppointments jobApp){
        try {
            String jobAccess = "1";
            if(jobApp.getStatus().equalsIgnoreCase("Accepted")){
                jobAccess = "0";
            }
            String queryUpdateStudent = "UPDATE uni_student SET jd_watch_eligible = '"+jobAccess+"' WHERE student_gov_id = '"
                    + jobApp.getSevisId() + "'";
            Statement st = conn.createStatement();
            st.executeUpdate(queryUpdateStudent);   
            st.close();
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void saveAcceptedJobToDb(JobAppointments jobApp){
        try {
            String queryNewDepartment = "INSERT into accepted_jobs (job_listings_id, student_gov_id, company_id, company_name, expected_grad_date, start_date, position, salary, course, job_title, nationality, level, role, student_name, university, gov_status, gov_issues, location) VALUES "
                    + "('"+ jobApp.getJobListingsId().toString() + "', '"  + jobApp.getSevisId() + "' , '" + jobApp.getCompanyId().toString() + "' "
                    + ", '" + selectedComp.getName() + "' , '" + getExpectedEndDate(uniStudents.searchBySevisId(jobApp.getSevisId())).toString() + "' , '" + compDeptDir.searchByJobId(jobApp.getJobListingsId()).getStartDate().toString() + "' , '" + compDeptDir.searchByJobId(jobApp.getJobListingsId()).getPosition() + "' "
                    + ", '" + compDeptDir.searchByJobId(jobApp.getJobListingsId()).getSalaryPerHr().toString() + "' , '" + uniStudents.searchBySevisId(jobApp.getSevisId()).getCourse() + "' , '" + compDeptDir.searchByJobId(jobApp.getJobListingsId()).getTitle() + "', '"+ uniStudents.searchBySevisId(jobApp.getSevisId()).getCountryOfOrigin() +"' , '"+ compDeptDir.searchByJobId(jobApp.getJobListingsId()).getLevel() +"' , '" + compDeptDir.searchByJobId(jobApp.getJobListingsId()).getRole() + "' , '" + uniStudents.searchBySevisId(jobApp.getSevisId()).getName() + "' , '" + uniStudents.searchBySevisId(jobApp.getSevisId()).getDepartment().getCollege().getUniversity().getName() + "' , 'Pending with HR' , 'Pending Gov. Approval' , '" + compDeptDir.searchByJobId(jobApp.getJobListingsId()).getLocation() + "')";
            Statement st = conn.createStatement();
            st.executeUpdate(queryNewDepartment); 
            st.close();
            
            compDeptDir.removeAllCompDepartment();
            getAllDepartments();
//            populateJobListingsTable(compDeptDir);
//            clearAllFields();
        
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void deleteAcceptedJobToDb(JobAppointments jobApp){
        try {
            String queryNewDepartment = "DELETE from accepted_jobs WHERE job_listings_id = '" + jobApp.getJobListingsId().toString() + "' AND student_gov_id = '"+ jobApp.getSevisId() +"' AND company_id = '" + jobApp.getCompanyId().toString() + "'";
            Statement st = conn.createStatement();
            st.executeUpdate(queryNewDepartment); 
            st.close();
            
            compDeptDir.removeAllCompDepartment();
            getAllDepartments();
//            populateJobListingsTable(compDeptDir);
//            clearAllFields();
        
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public LocalDate getExpectedEndDate(UniStudent student){
        LocalDate today = LocalDate.now();
        Integer month = today.getMonthValue();
        Integer year = today.getYear();
        
        LocalDate expectedStart = LocalDate.now();
        if(student.getSemester()==1){
            Integer monthsAdv = ((month + 9) % 12) / 4;
            Integer yearAdv = year;
            if(month >= 9){
                yearAdv+=1;
            }
            if(monthsAdv == 0){
                String expectedStartStr = yearAdv.toString() + "-04-30";
                expectedStart = LocalDate.parse(expectedStartStr);
            }else if(monthsAdv == 1){
                String expectedStartStr = yearAdv.toString() + "-08-31";
                expectedStart = LocalDate.parse(expectedStartStr);
            }else{
                String expectedStartStr = yearAdv.toString() + "-12-31";
                expectedStart = LocalDate.parse(expectedStartStr);
            }
        }else if(student.getSemester()==2){
            Integer monthsAdv = ((month + 6) % 12) / 4;
            Integer yearAdv = year;
            if(month >= 9){
                yearAdv+=1;
            }
            if(monthsAdv == 0){
                String expectedStartStr = yearAdv.toString() + "-04-30";
                expectedStart = LocalDate.parse(expectedStartStr);
            }else if(monthsAdv == 1){
                String expectedStartStr = yearAdv.toString() + "-08-31";
                expectedStart = LocalDate.parse(expectedStartStr);
            }else{
                String expectedStartStr = yearAdv.toString() + "-12-31";
                expectedStart = LocalDate.parse(expectedStartStr);
            }
        }else if(student.getSemester()==3){
            Integer monthsAdv = ((month + 3) % 12) / 4;
            Integer yearAdv = year;
            if(month >= 9){
                yearAdv+=1;
            }
            if(monthsAdv == 0){
                String expectedStartStr = yearAdv.toString() + "-04-30";
                expectedStart = LocalDate.parse(expectedStartStr);
            }else if(monthsAdv == 1){
                String expectedStartStr = yearAdv.toString() + "-08-31";
                expectedStart = LocalDate.parse(expectedStartStr);
            }else{
                String expectedStartStr = yearAdv.toString() + "-12-31";
                expectedStart = LocalDate.parse(expectedStartStr);
            }
        }else{
            Integer monthsAdv = ((month - 1) % 12) / 4;
            Integer yearAdv = year;
            
            if(monthsAdv == 0){
                String expectedStartStr = yearAdv.toString() + "-04-30";
                expectedStart = LocalDate.parse(expectedStartStr);
            }else if(monthsAdv == 1){
                String expectedStartStr = yearAdv.toString() + "-08-31";
                expectedStart = LocalDate.parse(expectedStartStr);
            }else{
                String expectedStartStr = yearAdv.toString() + "-12-31";
                expectedStart = LocalDate.parse(expectedStartStr);
            }
        }
        return expectedStart;
    }
    
     
    public ImageIcon retrieveImage(UniStudent myStudent){
        ImageIcon uploadedImage=null;
        ImageIcon scaledImageIcon=null;
        try{ Statement st = conn.createStatement();
                String query = "SELECT photos FROM photos WHERE student_id="+myStudent.getId();
                ResultSet rs = st.executeQuery(query); // retrieve photo
                int count=0;
                
//                System.out.println(count);
                
                while (rs.next()) // retrieve photo
                {
                    count++;
//                  int id = rs.getInt("id");
                    String filename = "retCapture"+".png";
                  try(FileOutputStream fos = new FileOutputStream(filename)){
                      Blob blob = rs.getBlob("photos");
                      int len = (int) blob.length();
                      byte[] buf = blob.getBytes(1, len);
                      fos.write(buf,0,len);
                      
                uploadedImage = new ImageIcon(filename);
                Image image1 = uploadedImage.getImage();
                Image scaledImage = image1.getScaledInstance(120, 120,  java.awt.Image.SCALE_SMOOTH);
                scaledImageIcon = new ImageIcon(scaledImage);
                  }catch(IOException ex){
                      Logger lgr =Logger.getLogger(UniStudentJPanel.class.getName());
                      lgr.log(Level.SEVERE,ex.getMessage(),ex);
                  }
                  
                  
                }
                st.close();

                if (conn != null) {
                    System.out.println("Connected to the database test1");

                    
                }
                
            } catch (SQLException ex) {
            System.out.println("An error occurred. Maybe user/password is invalid");
            ex.printStackTrace();
        }
        return scaledImageIcon;
    }
    
//    public void createPieChart(){
//    
//        DataConnection data = new DataConnection(conn);
//        Integer count =-20;
//        
//        HashMap<String,Integer> myInp = data.dataConn();
//        
//        for (String myKey:myInp.keySet()){
//            count+=10;
////            polarAreaChart1.addItem(new ModelPolarAreaChart(new Color((int) ((Math.random() * (255 - 0)) + 0), (int) ((Math.random() * (255 - 0)) + 0), (int) ((Math.random() * (255 - 0)) + 0)), myKey, myInp.get(myKey)));
//        }
//        
////        polarAreaChart1.start();
    
        DataConnection data = new DataConnection(conn);
        Integer count =-20;
        
//        HashMap<String,Integer> myInp = data.dataConn();
//        
        //for (String myKey:myInp.keySet()){
//            count+=10;
//            polarAreaChart1.addItem(new ModelPolarAreaChart(new Color((int) ((Math.random() * (255 - 0)) + 0), (int) ((Math.random() * (255 - 0)) + 0), (int) ((Math.random() * (255 - 0)) + 0)), myKey, myInp.get(myKey)));
//        }
        
//        polarAreaChart1.start();
    
}
