/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Image;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JSplitPane;
import model.CompDepartment;
import model.CompDepartmentDir;
import model.Company;
import model.CompanyDir;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import model.Government;
import model.GovernmentDir;
import model.JobAppointments;
import model.JobAppointmentsDir;
import model.UniCollege;
import model.UniCollegeDir;
import model.UniDepartment;
import model.UniDepartmentDir;
import model.UniStudent;
import model.UniStudentDir;
import model.University;
import model.UniversityDir;

/**
 *
 * @author Aditya, Ameya, Nainil
 */
public class CompanyJobListingJPanel extends javax.swing.JPanel {

    /**
     * Creates new form Choice_JPanel
     */
    JSplitPane splitPane;
    Connection conn = null;
    String choice = "";
    CompDepartmentDir compDeptDir = new CompDepartmentDir();
    CompanyDir compDir = new CompanyDir();
    Integer selectedRow = -1;
    Integer selectedRowStudent = -1;
    Company selectedComp = null;
    UniStudentDir uniStudents = new UniStudentDir();
    UniCollegeDir uniColleges = new UniCollegeDir();
    UniversityDir universities = new UniversityDir();
    UniDepartmentDir uniDepartments = new UniDepartmentDir();
    JobAppointmentsDir jobAppDir = new JobAppointmentsDir(); 
    JobAppointments selectedJob = new JobAppointments();
    GovernmentDir govDir = new GovernmentDir(); 
    Government selectedGov = new Government();
    
    
    public CompanyJobListingJPanel(JSplitPane splitPaneMain,Connection conn,Company selectedComp) {
        this.conn = conn;
        initComponents();
        btnPostListing.setEnabled(false);
        splitPane = splitPaneMain;
        
        this.selectedComp = selectedComp;
        
        getAllDepartments();
        populateJobListingsTable(compDeptDir);
        clearAllFields();
        getAllUniversityData();
        getAllStudents();
        findAllJobAppsOfStudent(selectedComp);
//        populateStudentDetilsTable(jobAppDir);
//        Test test = new Test();
//        test.setVisible(true);
        tblJobListings.getTableHeader().setFont( new Font( "Trebuchet MS" , Font.PLAIN, 18 ));
        
//        createPieChart();
//        Charts charts2 = new Charts(conn);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dateChooser2 = new com.raven.datechooser.DateChooser();
        kGradientPanel5 = new keeptoo.KGradientPanel();
        cmbLevel = new javax.swing.JComboBox<>();
        jLabel31 = new javax.swing.JLabel();
        btnPostListing = new button.Button();
        cmbRole = new javax.swing.JComboBox<>();
        cmbLocation = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblJobListings = new javax.swing.JTable();
        txtSalaryOffered = new javax.swing.JTextField();
        lblSalaryOffered = new javax.swing.JLabel();
        lblPosition = new javax.swing.JLabel();
        lblJobDescription = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaJobDescription = new javax.swing.JTextArea();
        lblLocation = new javax.swing.JLabel();
        lblRole = new javax.swing.JLabel();
        lblLevel = new javax.swing.JLabel();
        lblStartDate = new javax.swing.JLabel();
        txtStartDate = new javax.swing.JTextField();
        cmbPosition = new javax.swing.JComboBox<>();
        btnUpdate = new button.Button();
        btnAdd = new button.Button();
        btnDelete = new button.Button();
        btnSearch = new button.Button();
        btnRefreshTable = new button.Button();
        btnViewSelected = new button.Button();
        btnClear = new button.Button();
        lblJobTitle = new javax.swing.JLabel();
        txtJobTitle = new javax.swing.JTextField();
        lblJobListingsPanel = new javax.swing.JLabel();
        back_btn = new button.Button();

        dateChooser2.setDateFormat("yyyy-MM-dd");
        dateChooser2.setTextRefernce(txtStartDate);

        setPreferredSize(new java.awt.Dimension(1000, 630));

        kGradientPanel5.setkEndColor(new java.awt.Color(255, 204, 255));
        kGradientPanel5.setkStartColor(new java.awt.Color(204, 255, 204));
        kGradientPanel5.setPreferredSize(new java.awt.Dimension(850, 531));

        cmbLevel.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        cmbLevel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Specialist", "Associate", "Senior Associate", "Manager", "Analyst" }));

        jLabel31.setFont(new java.awt.Font("Trebuchet MS", 1, 22)); // NOI18N
        jLabel31.setText("JOB PROFILE");

        btnPostListing.setText("Post Opening");
        btnPostListing.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        btnPostListing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPostListingActionPerformed(evt);
            }
        });

        cmbRole.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        cmbRole.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Software Developer", "Web Designer", "Data Analyst", "Business Analyst", "Data Scientist", "Data Engineer", "Project Manager" }));

        cmbLocation.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        cmbLocation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Boston", "New York", "Chicago", "San Francisco", "Los Angeles", "Seattle" }));

        tblJobListings.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        tblJobListings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Job ID", "Job Title", "Location", "Role", "Level", "Position", "Start Date", "Salary per Hr"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblJobListings);

        txtSalaryOffered.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        txtSalaryOffered.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSalaryOfferedActionPerformed(evt);
            }
        });

        lblSalaryOffered.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        lblSalaryOffered.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSalaryOffered.setText("Salary/hr");

        lblPosition.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        lblPosition.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPosition.setText("Position");

        lblJobDescription.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        lblJobDescription.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblJobDescription.setText("Job Description");

        txtAreaJobDescription.setColumns(20);
        txtAreaJobDescription.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        txtAreaJobDescription.setRows(5);
        jScrollPane1.setViewportView(txtAreaJobDescription);

        lblLocation.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        lblLocation.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblLocation.setText("Location");

        lblRole.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        lblRole.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRole.setText("Role");

        lblLevel.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        lblLevel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblLevel.setText("Level");

        lblStartDate.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        lblStartDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblStartDate.setText("Start Date");

        txtStartDate.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        txtStartDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStartDateActionPerformed(evt);
            }
        });

        cmbPosition.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        cmbPosition.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Intern", "Full-Time" }));

        btnUpdate.setText("Update Opening");
        btnUpdate.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(204, 255, 204));
        btnAdd.setForeground(new java.awt.Color(0, 0, 255));
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icon_5.png"))); // NOI18N
        btnAdd.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        btnAdd.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(204, 255, 204));
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icon_6.png"))); // NOI18N
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSearch.setBackground(new java.awt.Color(204, 255, 204));
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icon_7.png"))); // NOI18N
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnRefreshTable.setBackground(new java.awt.Color(204, 255, 204));
        btnRefreshTable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icon_4.png"))); // NOI18N
        btnRefreshTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshTableActionPerformed(evt);
            }
        });

        btnViewSelected.setBackground(new java.awt.Color(204, 255, 204));
        btnViewSelected.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icon_9.png"))); // NOI18N
        btnViewSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewSelectedActionPerformed(evt);
            }
        });

        btnClear.setBackground(new java.awt.Color(204, 255, 204));
        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icon_8.png"))); // NOI18N
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        lblJobTitle.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        lblJobTitle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblJobTitle.setText("Job Title");

        txtJobTitle.setFont(new java.awt.Font("Trebuchet MS", 0, 15)); // NOI18N
        txtJobTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtJobTitleActionPerformed(evt);
            }
        });

        lblJobListingsPanel.setFont(new java.awt.Font("Trebuchet MS", 1, 30)); // NOI18N
        lblJobListingsPanel.setText("Job Listings Panel");

        back_btn.setBackground(new java.awt.Color(204, 204, 255));
        back_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icon_3.png"))); // NOI18N
        back_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout kGradientPanel5Layout = new javax.swing.GroupLayout(kGradientPanel5);
        kGradientPanel5.setLayout(kGradientPanel5Layout);
        kGradientPanel5Layout.setHorizontalGroup(
            kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kGradientPanel5Layout.createSequentialGroup()
                        .addComponent(lblJobListingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(back_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel5Layout.createSequentialGroup()
                        .addGroup(kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(kGradientPanel5Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnPostListing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, kGradientPanel5Layout.createSequentialGroup()
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRefreshTable, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnViewSelected, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(kGradientPanel5Layout.createSequentialGroup()
                .addGap(195, 195, 195)
                .addGroup(kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel5Layout.createSequentialGroup()
                        .addGroup(kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblRole, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbRole, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(kGradientPanel5Layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addComponent(lblSalaryOffered, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel5Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblJobTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblJobDescription, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(txtSalaryOffered)
                            .addComponent(txtJobTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel31)
                        .addGap(247, 247, 247)))
                .addContainerGap(200, Short.MAX_VALUE))
        );

        kGradientPanel5Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnPostListing, btnUpdate});

        kGradientPanel5Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAdd, btnClear, btnDelete, btnRefreshTable, btnSearch, btnViewSelected});

        kGradientPanel5Layout.setVerticalGroup(
            kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel5Layout.createSequentialGroup()
                .addGroup(kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kGradientPanel5Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblJobListingsPanel))
                    .addComponent(back_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRefreshTable, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnViewSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel31)
                .addGap(18, 18, 18)
                .addGroup(kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kGradientPanel5Layout.createSequentialGroup()
                        .addGroup(kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLocation))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblRole, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLevel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPosition, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblStartDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(kGradientPanel5Layout.createSequentialGroup()
                        .addGroup(kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtJobTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblJobTitle))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(kGradientPanel5Layout.createSequentialGroup()
                                .addComponent(lblJobDescription)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSalaryOffered, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSalaryOffered, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)))
                .addGap(30, 30, 30)
                .addGroup(kGradientPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPostListing, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46))
        );

        kGradientPanel5Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnPostListing, btnUpdate});

        kGradientPanel5Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAdd, btnClear, btnDelete, btnRefreshTable, btnSearch, btnViewSelected});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(kGradientPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 1084, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtJobTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtJobTitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtJobTitleActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        clearAllFields();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnViewSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewSelectedActionPerformed
        // TODO add your handling code here:
        selectedRow = tblJobListings.getSelectedRow();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(this, "Please select a row");
            return;
        }else{
            DefaultTableModel tableModel = (DefaultTableModel) tblJobListings.getModel();
            CompDepartment dept = (CompDepartment) tableModel.getValueAt(selectedRow, 0);
            displayDepartment(dept);
        }
    }//GEN-LAST:event_btnViewSelectedActionPerformed

    private void btnRefreshTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshTableActionPerformed
        // TODO add your handling code here:
        compDeptDir.removeAllCompDepartment();
        getAllDepartments();
        populateJobListingsTable(compDeptDir);
        clearAllFields();
    }//GEN-LAST:event_btnRefreshTableActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        JPanel panel = new JPanel(new GridLayout(0, 1));
        panel.add(new JLabel("Please select a field:"));
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.addElement("Role");
        model.addElement("Position");
        model.addElement("Salary");

        JComboBox comboBox = new JComboBox(model);
        panel.add(comboBox);

        int resultField = JOptionPane.showConfirmDialog(null, panel, "Search by Field", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        if(resultField == JOptionPane.OK_OPTION){
            String fieldSelected = comboBox.getSelectedItem().toString();

            DefaultComboBoxModel role = new DefaultComboBoxModel();
            for(CompDepartment dept : compDeptDir.getCompDepartmentList()){
                role.addElement(dept.getRole());
            }
            JComboBox comboBoxRole = new JComboBox(role);

            DefaultComboBoxModel position = new DefaultComboBoxModel();
            for(CompDepartment dept : compDeptDir.getCompDepartmentList()){
                position.addElement(dept.getPosition());
            }
            JComboBox comboBoxPosition = new JComboBox(position);

            JTextField txtField = new JTextField("");

            panel.add(new JLabel("Value:"));

            if(fieldSelected.equalsIgnoreCase("Role")){
                comboBox.setEnabled(false);
                panel.add(comboBoxRole);
            }else if(fieldSelected.equalsIgnoreCase("Position")){
                comboBox.setEnabled(false);
                panel.add(comboBoxPosition);
            }else{
                comboBox.setEnabled(false);
                panel.add(txtField);
            }

            int resultValue = JOptionPane.showConfirmDialog(null, panel, "Search by Field", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(resultValue == JOptionPane.OK_OPTION) {

                String fieldValue;
                if(fieldSelected.equalsIgnoreCase("Role")){
                    fieldValue = comboBoxRole.getSelectedItem().toString();
                } else if(fieldSelected.equalsIgnoreCase("Position")){
                    fieldValue = comboBoxPosition.getSelectedItem().toString();

                } else {
                    fieldValue = txtField.getText();
                }

                if(fieldValue.equalsIgnoreCase("")){
                    JOptionPane.showMessageDialog(this, "Please enter a value");
                }else{
                    CompDepartmentDir resultCompDeptDir = new CompDepartmentDir();
                    ArrayList<CompDepartment> resultDepartments = new ArrayList<CompDepartment>();

                    if(fieldSelected.equalsIgnoreCase("Salary")){
                        resultDepartments = compDeptDir.searchBySalary(Double.valueOf(fieldValue));
                    }else if(fieldSelected.equalsIgnoreCase("Role")){
                        resultDepartments = compDeptDir.searchByRole(fieldValue);
                    }else if(fieldSelected.equalsIgnoreCase("Position")){
                        resultDepartments = compDeptDir.searchByPosition(fieldValue);

                    }else{
                        resultDepartments = null;
                    }

                    if(resultDepartments.isEmpty()){
                        JOptionPane.showMessageDialog(this, "No Results Found");
                        populateJobListingsTable(compDeptDir);
                    }else{
                        JOptionPane.showMessageDialog(this, "Entries found");
                        resultCompDeptDir.setCompDepartmentList(resultDepartments);
                        populateJobListingsTable(resultCompDeptDir);
                    }
                }
            }else{
                JOptionPane.showMessageDialog(this, "Search Cancelled");
            }
        }else{
            JOptionPane.showMessageDialog(this, "Search Cancelled");
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        selectedRow = tblJobListings.getSelectedRow();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(this, "Please select a row");
            return;
        }else{
            DefaultTableModel tableModel = (DefaultTableModel) tblJobListings.getModel();
            CompDepartment dept = (CompDepartment) tableModel.getValueAt(selectedRow, 0);
            deleteDepartment(dept);

        }

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        clearAllFields();
        btnPostListing.setEnabled(true);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:

        selectedRow = tblJobListings.getSelectedRow();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(this, "Please select a row");
            return;
        }else{
            DefaultTableModel tableModel = (DefaultTableModel) tblJobListings.getModel();
            CompDepartment dept = (CompDepartment) tableModel.getValueAt(selectedRow, 0);
            updateDepartment(dept);
            
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtStartDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStartDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStartDateActionPerformed

    private void txtSalaryOfferedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSalaryOfferedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSalaryOfferedActionPerformed

    private void btnPostListingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPostListingActionPerformed
        // TODO add your handling code here:
        saveDepartmentDetails();
        btnPostListing.setEnabled(false);
    }//GEN-LAST:event_btnPostListingActionPerformed

    private void back_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_btnActionPerformed
        // TODO add your handling code here:
        int res = JOptionPane.showConfirmDialog(null, "Are you sure you want to logout?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE);
        if(res == 0) {
            CompanyLoginJPanel choicePanel = new CompanyLoginJPanel(splitPane, conn);
            splitPane.setRightComponent(choicePanel);
        }
        else{
            //Pressed No
        }
    }//GEN-LAST:event_back_btnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private button.Button back_btn;
    private button.Button btnAdd;
    private button.Button btnClear;
    private button.Button btnDelete;
    private button.Button btnPostListing;
    private button.Button btnRefreshTable;
    private button.Button btnSearch;
    private button.Button btnUpdate;
    private button.Button btnViewSelected;
    private javax.swing.JComboBox<String> cmbLevel;
    private javax.swing.JComboBox<String> cmbLocation;
    private javax.swing.JComboBox<String> cmbPosition;
    private javax.swing.JComboBox<String> cmbRole;
    private com.raven.datechooser.DateChooser dateChooser2;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private keeptoo.KGradientPanel kGradientPanel5;
    private javax.swing.JLabel lblJobDescription;
    private javax.swing.JLabel lblJobListingsPanel;
    private javax.swing.JLabel lblJobTitle;
    private javax.swing.JLabel lblLevel;
    private javax.swing.JLabel lblLocation;
    private javax.swing.JLabel lblPosition;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblSalaryOffered;
    private javax.swing.JLabel lblStartDate;
    private javax.swing.JTable tblJobListings;
    private javax.swing.JTextArea txtAreaJobDescription;
    private javax.swing.JTextField txtJobTitle;
    private javax.swing.JTextField txtSalaryOffered;
    private javax.swing.JTextField txtStartDate;
    // End of variables declaration//GEN-END:variables
    
    public void getAllDepartments(){
        try {
            String queryDepartments = "SELECT * FROM job_listings WHERE company_name='"+selectedComp.getName()+"'";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(queryDepartments); 
                while (rs.next())
                {
                    
                    CompDepartment dept = compDeptDir.addCompDepartment();
                    
                    dept.setJobId(rs.getInt("id"));
                    dept.setCompany(selectedComp);                 
                    dept.setJobDescription(rs.getString("job_description"));
                    dept.setLevel(rs.getString("level"));
                    dept.setLocation(rs.getString("location"));
                    dept.setPosition(rs.getString("position"));
                    dept.setRole(rs.getString("role"));
                    dept.setSalaryPerHr(rs.getDouble("salary_offered"));
                    dept.setStartDate(LocalDate.parse(rs.getString("start_date")));
                    dept.setTitle(rs.getString("job_title"));
                    dept.setVisible(rs.getBoolean("visible"));
                    
                    
                }
                st.close();
//                stCompany.close();
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void populateJobListingsTable(CompDepartmentDir compDepartmentDir){
        DefaultTableModel tableModel = (DefaultTableModel) tblJobListings.getModel();
        tableModel.setRowCount(0);
        
        for(CompDepartment dept : compDepartmentDir.getCompDepartmentList()){
            if(dept.getVisible()){
                Object row[] = new Object[8];
                row[0] = dept;
                row[1] = dept.getTitle();
                row[2] = dept.getLocation();
                row[3] = dept.getRole();
                row[4] = dept.getLevel();
                row[5] = dept.getPosition();
                row[6] = dept.getStartDate().toString();
                row[7] = dept.getSalaryPerHr().toString();
                tableModel.addRow(row);
            }
        }
    }
    
    public void updateDepartment(CompDepartment oldDept){
        if( txtJobTitle.getText().equalsIgnoreCase("") || txtAreaJobDescription.getText().equalsIgnoreCase("") || 
                txtSalaryOffered.getText().equalsIgnoreCase("") || txtStartDate.getText().equalsIgnoreCase("")
                ){
            JOptionPane.showMessageDialog(this, "Please fill all fields");
        }else if(!isSalaryValid(txtSalaryOffered.getText())){
            JOptionPane.showMessageDialog(this, "Salary should be a number greater than 0");
        }else{
            CompDepartment newDept = new CompDepartment();
            newDept = oldDept;

            newDept.setStartDate(LocalDate.parse(txtStartDate.getText()));
            newDept.setJobDescription(txtAreaJobDescription.getText());
            newDept.setLevel(cmbLevel.getSelectedItem().toString());
            newDept.setLocation(cmbLocation.getSelectedItem().toString());
            newDept.setPosition(cmbPosition.getSelectedItem().toString());
            newDept.setRole(cmbRole.getSelectedItem().toString());
            newDept.setTitle(txtJobTitle.getText());
            newDept.setSalaryPerHr(Double.parseDouble(txtSalaryOffered.getText()));
            compDeptDir.updateCompDepartment(oldDept, newDept);

            updateDepartmentToDb(oldDept, newDept);
            clearAllFields();
            populateJobListingsTable(compDeptDir);
            JOptionPane.showMessageDialog(this, "Record updated successfully");
        }
    }
    
    public void updateDepartmentToDb(CompDepartment oldCompDepartment, CompDepartment newCompDepartment){
        try {
            
            String queryNewDept = "UPDATE job_listings SET role = '" + newCompDepartment.getRole() + "' , level = '" + newCompDepartment.getLevel() + "'"
                    + ", position = '" + newCompDepartment.getPosition()+ "', job_description = '" + newCompDepartment.getJobDescription() 
                    + "', job_title = '" + newCompDepartment.getTitle()+  "', start_date = '" + newCompDepartment.getStartDate().toString()
                    + "', salary_offered = '" + newCompDepartment.getSalaryPerHr()
                    + "', location = '" + newCompDepartment.getLocation()+ "' WHERE id='"
                    + oldCompDepartment.getJobId()+ "'";
            Statement st = conn.createStatement();
            st.executeUpdate(queryNewDept);   
            st.close();
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void saveDepartmentDetails(){
        if( txtJobTitle.getText().equalsIgnoreCase("") || txtAreaJobDescription.getText().equalsIgnoreCase("") || 
                txtSalaryOffered.getText().equalsIgnoreCase("") || txtStartDate.getText().equalsIgnoreCase("")
                ){
            JOptionPane.showMessageDialog(this, "Please fill all fields");
        }else if(!isSalaryValid(txtSalaryOffered.getText())){
            JOptionPane.showMessageDialog(this, "Salary should be a number greater than 0");
        }else{
                CompDepartment newDept = compDeptDir.addCompDepartment();
                
                newDept.setStartDate(LocalDate.parse(txtStartDate.getText()));
                newDept.setJobDescription(txtAreaJobDescription.getText());
                newDept.setLevel(cmbLevel.getSelectedItem().toString());
                newDept.setLocation(cmbLocation.getSelectedItem().toString());
                newDept.setPosition(cmbPosition.getSelectedItem().toString());
                newDept.setRole(cmbRole.getSelectedItem().toString());
                newDept.setTitle(txtJobTitle.getText());
                newDept.setSalaryPerHr(Double.parseDouble(txtSalaryOffered.getText()));
                newDept.setVisible(true);
                
                saveDepartmentToDb(newDept);
                clearAllFields();
                populateJobListingsTable(compDeptDir);
                
            }
           
    }
    
    public void saveDepartmentToDb(CompDepartment department){
        try {
            String queryNewDepartment = "INSERT into job_listings (company_name, role, level, position, job_description, job_title, start_date, salary_offered, location, visible) VALUES "
                    + "('"+ selectedComp.getName()+ "', '"  + department.getRole()+ "' , '" + department.getLevel() + "' "
                    + ", '" + department.getPosition()+ "' , '" + department.getJobDescription()+ "' , '" + department.getTitle()+ "' , '" + department.getStartDate().toString() + "' "
                    + ", '" + department.getSalaryPerHr().toString() + "' , '" + department.getLocation() + "' , '1' )";
            Statement st = conn.createStatement();
            st.executeUpdate(queryNewDepartment); 
            st.close();
            
            compDeptDir.removeAllCompDepartment();
            getAllDepartments();
            populateJobListingsTable(compDeptDir);
            clearAllFields();
        
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void deleteDepartment(CompDepartment dept){
        int result = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this entry?", "Confirm Deletion", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        if(result == JOptionPane.OK_OPTION ){
//            compDeptDir.deleteCompDepartment(dept);
            CompDepartment newDept = new CompDepartment();
            newDept = dept;
            newDept.setVisible(false);
            deleteDepartmentFromDb(dept);
            clearAllFields();
            populateJobListingsTable(compDeptDir);
        }else{
            JOptionPane.showMessageDialog(this, "Deletion cancelled");
        }
        
    }
    
    public void deleteDepartmentFromDb(CompDepartment dept){
        try {
            String queryDelDept = "UPDATE job_listings SET visible = '0' WHERE "
                    + "id = '" + dept.getJobId() + "'";
            Statement st = conn.createStatement();
            st.executeUpdate(queryDelDept);   
            st.close();
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void displayDepartment(CompDepartment dept){
        
        txtAreaJobDescription.setText(dept.getJobDescription());
        txtSalaryOffered.setText(dept.getSalaryPerHr().toString());
        txtStartDate.setText(dept.getStartDate().toString());
        txtJobTitle.setText(dept.getTitle());
        
        cmbLevel.setSelectedItem(dept.getLevel());
        cmbLocation.setSelectedItem(dept.getLocation());
        cmbPosition.setSelectedItem(dept.getPosition());
        cmbRole.setSelectedItem(dept.getRole());

    }
    
    public void clearAllFields(){
        txtAreaJobDescription.setText("");
        txtStartDate.setText("");
        txtJobTitle.setText("");
        txtSalaryOffered.setText("");
        
    }

//    public void clearAllFieldsViewApplicants(){
//        txtStudentName.setText("");
//        txtUniversity.setText("");
//        txtApplicationDate.setText("");
//        txtAreaComments.setText("");
//        
//        cmbStatus.setSelectedIndex(0);
//    }

    public void getAllStudents(){
        try {
            String queryStudents = "SELECT * FROM uni_student";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(queryStudents);                
                while (rs.next())
                {
                    UniStudent student = uniStudents.addUniStudent();
                    student.setId(rs.getInt("id"));
                    student.setName(rs.getString("name"));
                    student.setSevisId(rs.getString("student_gov_id"));
                    student.setContactNo(rs.getLong("contact_no"));
                    student.setEmailId(rs.getString("email"));
                    student.setGpa(rs.getDouble("gpa"));
                    student.setIntake(rs.getString("intake"));
                    student.setSemester(rs.getInt("semester"));
                    student.setCourse(rs.getString("course"));
                    student.setJdWatchAccess(rs.getBoolean("jd_watch_eligible"));
                    student.setCountryOfOrigin(rs.getString("country_of_origin"));
                    
                    if(rs.getString("start_date") != null){
                        student.setStartDate(LocalDate.parse(rs.getString("start_date")));
                    }
                    if(rs.getString("end_date") != null){
                        student.setEndDate(LocalDate.parse(rs.getString("end_date")));
                    }
                    if(rs.getString("comments") != null){
                        student.setComments(rs.getString("comments"));
                    }
                    
                    UniDepartment department = uniDepartments.searchById(rs.getInt("uni_department_id"));
                    student.setDepartment(department);
                }
                st.close();
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void getAllUniversityData(){
         try {
                //Universities
                String queryUniversity = "SELECT * FROM university";
                Statement st = conn.createStatement();
                ResultSet rs = st.executeQuery(queryUniversity);                
                while (rs.next())
                {
                    University university = universities.addUniversity();
                    university.setId(rs.getInt("id"));
                    university.setName(rs.getString("name"));
                    university.setDistrict(rs.getString("district"));
                    university.setState(rs.getString("state"));
                    university.setCountry(rs.getString("country"));
                    university.setPincode(rs.getLong("pincode"));
                }
                st.close();

                //Colleges
                String queryCollege = "SELECT * FROM uni_college";
                Statement stCollege = conn.createStatement();
                ResultSet rsCollege = stCollege.executeQuery(queryCollege);                
                while (rsCollege.next())
                {
                    UniCollege college = uniColleges.addUniCollege();
                    college.setId(rsCollege.getInt("id"));
                    college.setName(rsCollege.getString("name"));

                    for(University uni : universities.getUniversityList()){
                        if(uni.getId() == rsCollege.getInt("university_id")){
                            college.setUniversity(uni);
                        }
                    }

                }
                stCollege.close();

                //Departments
                String queryDepartment = "SELECT * FROM uni_department";
                Statement stDepartment = conn.createStatement();
                ResultSet rsDepartment = stDepartment.executeQuery(queryDepartment);                
                while (rsDepartment.next())
                {
                    UniDepartment dept = uniDepartments.addUniDepartment();
                    dept.setId(rsDepartment.getInt("id"));
                    dept.setName(rsDepartment.getString("name"));

                    for(UniCollege college : uniColleges.getUniCollegeList()){
                        if(college.getId() == rsDepartment.getInt("uni_college_id")){
                            dept.setCollege(college);
                        }
                    }

                }
                stDepartment.close();

            } catch (SQLException ex) {
                System.out.println("An error occurred. Maybe user/password is invalid");
                ex.printStackTrace();
        }       
    }
    
    public void findAllJobAppsOfStudent(Company company){
        try {
            String queryStudents = "SELECT * FROM appointments WHERE company_id = '" + company.getId().toString() + "'";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(queryStudents);                
                while (rs.next())
                {
                    JobAppointments jobApp = jobAppDir.addJobAppointment();
                    
                    jobApp.setApplicationId(rs.getInt("application_id"));
                    jobApp.setSevisId(rs.getString("student_gov_id"));
                    jobApp.setCompanyId(rs.getInt("company_id"));
                    jobApp.setJobListingsId(rs.getInt("job_listings_id"));
                    jobApp.setDateApplied(LocalDate.parse(rs.getString("date_applied")));
                    if(rs.getString("status")!=null){
                        jobApp.setStatus(rs.getString("status"));
                    }
                    if(rs.getString("comments")!=null){
                        jobApp.setComments(rs.getString("comments"));
                    }
                }
                st.close();
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
//    public void populateStudentDetilsTable(JobAppointmentsDir jobAppDir){
//        DefaultTableModel tableModel = (DefaultTableModel) tblStudentDetails.getModel();
//        tableModel.setRowCount(0);
//        
//        for(JobAppointments jobApp : jobAppDir.getJobAppointmentsList()){
//            Object row[] = new Object[7];
//            row[0] = jobApp;
//            row[1] = jobApp.getJobListingsId().toString();
//            row[2] = uniStudents.searchBySevisId(jobApp.getSevisId()).getName();
//            row[3] = uniStudents.searchBySevisId(jobApp.getSevisId()).getDepartment().getCollege().getUniversity().getName();
//            row[4] = uniStudents.searchBySevisId(jobApp.getSevisId()).getCourse();
//            row[5] = uniStudents.searchBySevisId(jobApp.getSevisId()).getGpa().toString();
//            row[6] = jobApp.getStatus();
//            
//            tableModel.addRow(row);
//        }
//    }
//    
//    public void viewJobAppointment(JobAppointments jobApp){
//        txtStudentName.setText(uniStudents.searchBySevisId(jobApp.getSevisId()).getName());
//        txtUniversity.setText(uniStudents.searchBySevisId(jobApp.getSevisId()).getDepartment().getCollege().getUniversity().getName());
//        txtApplicationDate.setText(jobApp.getDateApplied().toString());
//        ImageIcon myImg = retrieveImage(uniStudents.searchBySevisId(jobApp.getSevisId()));
//        lblImage.setText("");
//        lblImage.setIcon(myImg);
//        if(jobApp.getComments()!=null){
//            txtAreaComments.setText(jobApp.getComments());
//        }else{
//            txtAreaComments.setText("");
//        }
//        
//        if(jobApp.getStatus()!=null){
//            cmbStatus.setSelectedItem(jobApp.getStatus());
//        }else{
//            cmbStatus.setSelectedItem("");
//        }
//        
//    }
    
//    public void updateStatus(JobAppointments jobApp){
//        if(cmbStatus.getSelectedItem().toString().equalsIgnoreCase("Applied")){
//            JOptionPane.showMessageDialog(this, "Incorrect selection. Please try again.");
//            clearAllFieldsViewApplicants();
//        }else{
//            JobAppointments newJobApp = new JobAppointments();
//            newJobApp = jobApp;
//            newJobApp.setStatus(cmbStatus.getSelectedItem().toString());
//            newJobApp.setComments(txtAreaComments.getText());
//
//            jobAppDir.updateJobAppointment(jobApp, newJobApp);
//            if(cmbStatus.getSelectedItem().toString().equalsIgnoreCase("Accepted")){
//                saveJobAppUpdateToDb(newJobApp);
//                updateStudentJobAccess(newJobApp);
//                saveAcceptedJobToDb(newJobApp);
//            }else{
//                saveJobAppUpdateToDb(newJobApp);
//                updateStudentJobAccess(newJobApp);
//                deleteAcceptedJobToDb(newJobApp);
//            }
//            populateStudentDetilsTable(jobAppDir);
//            clearAllFieldsViewApplicants();
//        }
//    }
    
    public void saveJobAppUpdateToDb(JobAppointments jobApp){
        try {
            String queryUpdateJobApp = "UPDATE appointments SET status = '" + jobApp.getStatus() + "' , comments = '" + jobApp.getComments() + "' WHERE application_id = '"
                    + jobApp.getApplicationId().toString() + "'";
            Statement st = conn.createStatement();
            st.executeUpdate(queryUpdateJobApp);   
            st.close();
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void updateStudentJobAccess(JobAppointments jobApp){
        try {
            String jobAccess = "1";
            if(jobApp.getStatus().equalsIgnoreCase("Accepted")){
                jobAccess = "0";
            }
            String queryUpdateStudent = "UPDATE uni_student SET jd_watch_eligible = '"+jobAccess+"' WHERE student_gov_id = '"
                    + jobApp.getSevisId() + "'";
            Statement st = conn.createStatement();
            st.executeUpdate(queryUpdateStudent);   
            st.close();
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void saveAcceptedJobToDb(JobAppointments jobApp){
        try {
            String queryNewDepartment = "INSERT into accepted_jobs (job_listings_id, student_gov_id, company_id, company_name, expected_grad_date, start_date, position, salary, course, job_title, nationality, level, role, student_name, university, gov_status, gov_issues, location) VALUES "
                    + "('"+ jobApp.getJobListingsId().toString() + "', '"  + jobApp.getSevisId() + "' , '" + jobApp.getCompanyId().toString() + "' "
                    + ", '" + selectedComp.getName() + "' , '" + getExpectedEndDate(uniStudents.searchBySevisId(jobApp.getSevisId())).toString() + "' , '" + compDeptDir.searchByJobId(jobApp.getJobListingsId()).getStartDate().toString() + "' , '" + compDeptDir.searchByJobId(jobApp.getJobListingsId()).getPosition() + "' "
                    + ", '" + compDeptDir.searchByJobId(jobApp.getJobListingsId()).getSalaryPerHr().toString() + "' , '" + uniStudents.searchBySevisId(jobApp.getSevisId()).getCourse() + "' , '" + compDeptDir.searchByJobId(jobApp.getJobListingsId()).getTitle() + "', '"+ uniStudents.searchBySevisId(jobApp.getSevisId()).getCountryOfOrigin() +"' , '"+ compDeptDir.searchByJobId(jobApp.getJobListingsId()).getLevel() +"' , '" + compDeptDir.searchByJobId(jobApp.getJobListingsId()).getRole() + "' , '" + uniStudents.searchBySevisId(jobApp.getSevisId()).getName() + "' , '" + uniStudents.searchBySevisId(jobApp.getSevisId()).getDepartment().getCollege().getUniversity().getName() + "' , 'Pending with HR' , 'Pending Gov. Approval' , '" + compDeptDir.searchByJobId(jobApp.getJobListingsId()).getLocation() + "')";
            Statement st = conn.createStatement();
            st.executeUpdate(queryNewDepartment); 
            st.close();
            
            compDeptDir.removeAllCompDepartment();
            getAllDepartments();
            populateJobListingsTable(compDeptDir);
            clearAllFields();
        
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void deleteAcceptedJobToDb(JobAppointments jobApp){
        try {
            String queryNewDepartment = "DELETE from accepted_jobs WHERE job_listings_id = '" + jobApp.getJobListingsId().toString() + "' AND student_gov_id = '"+ jobApp.getSevisId() +"' AND company_id = '" + jobApp.getCompanyId().toString() + "'";
            Statement st = conn.createStatement();
            st.executeUpdate(queryNewDepartment); 
            st.close();
            
            compDeptDir.removeAllCompDepartment();
            getAllDepartments();
            populateJobListingsTable(compDeptDir);
            clearAllFields();
        
        } catch (SQLException ex) {
            Logger.getLogger(UniExamCellJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public LocalDate getExpectedEndDate(UniStudent student){
        LocalDate today = LocalDate.now();
        Integer month = today.getMonthValue();
        Integer year = today.getYear();
        
        LocalDate expectedStart = LocalDate.now();
        if(student.getSemester()==1){
            Integer monthsAdv = ((month + 9) % 12) / 4;
            Integer yearAdv = year;
            if(month >= 9){
                yearAdv+=1;
            }
            if(monthsAdv == 0){
                String expectedStartStr = yearAdv.toString() + "-04-30";
                expectedStart = LocalDate.parse(expectedStartStr);
            }else if(monthsAdv == 1){
                String expectedStartStr = yearAdv.toString() + "-08-31";
                expectedStart = LocalDate.parse(expectedStartStr);
            }else{
                String expectedStartStr = yearAdv.toString() + "-12-31";
                expectedStart = LocalDate.parse(expectedStartStr);
            }
        }else if(student.getSemester()==2){
            Integer monthsAdv = ((month + 6) % 12) / 4;
            Integer yearAdv = year;
            if(month >= 9){
                yearAdv+=1;
            }
            if(monthsAdv == 0){
                String expectedStartStr = yearAdv.toString() + "-04-30";
                expectedStart = LocalDate.parse(expectedStartStr);
            }else if(monthsAdv == 1){
                String expectedStartStr = yearAdv.toString() + "-08-31";
                expectedStart = LocalDate.parse(expectedStartStr);
            }else{
                String expectedStartStr = yearAdv.toString() + "-12-31";
                expectedStart = LocalDate.parse(expectedStartStr);
            }
        }else if(student.getSemester()==3){
            Integer monthsAdv = ((month + 3) % 12) / 4;
            Integer yearAdv = year;
            if(month >= 9){
                yearAdv+=1;
            }
            if(monthsAdv == 0){
                String expectedStartStr = yearAdv.toString() + "-04-30";
                expectedStart = LocalDate.parse(expectedStartStr);
            }else if(monthsAdv == 1){
                String expectedStartStr = yearAdv.toString() + "-08-31";
                expectedStart = LocalDate.parse(expectedStartStr);
            }else{
                String expectedStartStr = yearAdv.toString() + "-12-31";
                expectedStart = LocalDate.parse(expectedStartStr);
            }
        }else{
            Integer monthsAdv = ((month - 1) % 12) / 4;
            Integer yearAdv = year;
            
            if(monthsAdv == 0){
                String expectedStartStr = yearAdv.toString() + "-04-30";
                expectedStart = LocalDate.parse(expectedStartStr);
            }else if(monthsAdv == 1){
                String expectedStartStr = yearAdv.toString() + "-08-31";
                expectedStart = LocalDate.parse(expectedStartStr);
            }else{
                String expectedStartStr = yearAdv.toString() + "-12-31";
                expectedStart = LocalDate.parse(expectedStartStr);
            }
        }
        return expectedStart;
    }
    
     
    public ImageIcon retrieveImage(UniStudent myStudent){
        ImageIcon uploadedImage=null;
        ImageIcon scaledImageIcon=null;
        try{ Statement st = conn.createStatement();
                String query = "SELECT photos FROM photos WHERE student_id="+myStudent.getId();
                ResultSet rs = st.executeQuery(query); // retrieve photo
                int count=0;
                
//                System.out.println(count);
                
                while (rs.next()) // retrieve photo
                {
                    count++;
//                  int id = rs.getInt("id");
                    String filename = "retCapture"+".png";
                  try(FileOutputStream fos = new FileOutputStream(filename)){
                      Blob blob = rs.getBlob("photos");
                      int len = (int) blob.length();
                      byte[] buf = blob.getBytes(1, len);
                      fos.write(buf,0,len);
                      
                uploadedImage = new ImageIcon(filename);
                Image image1 = uploadedImage.getImage();
                Image scaledImage = image1.getScaledInstance(120, 120,  java.awt.Image.SCALE_SMOOTH);
                scaledImageIcon = new ImageIcon(scaledImage);
                  }catch(IOException ex){
                      Logger lgr =Logger.getLogger(UniStudentJPanel.class.getName());
                      lgr.log(Level.SEVERE,ex.getMessage(),ex);
                  }
                  
                  
                }
                st.close();

                if (conn != null) {
                    System.out.println("Connected to the database test1");

                    
                }
                
            } catch (SQLException ex) {
            System.out.println("An error occurred. Maybe user/password is invalid");
            ex.printStackTrace();
        }
        return scaledImageIcon;
    }
    
    public void createPieChart(){
    
        DataConnection data = new DataConnection(conn);
        Integer count =-20;
        
        ArrayList<HashMap<String,Integer>> myInp = data.dataConn();
        
//        for (String myKey:myInp.keySet()){
//            count+=10;
////            polarAreaChart1.addItem(new ModelPolarAreaChart(new Color((int) ((Math.random() * (255 - 0)) + 0), (int) ((Math.random() * (255 - 0)) + 0), (int) ((Math.random() * (255 - 0)) + 0)), myKey, myInp.get(myKey)));
//        }
        
//        polarAreaChart1.start();
    
    }
    
    public static boolean isSalaryValid(String str) { 
        try {  
          Long.valueOf(str);
          if(Long.valueOf(str)<0){
            return false;
          }else{
            return true;
          }
        } catch(NumberFormatException e){  
          return false;  
        }  
    }
    
}
