/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import java.awt.Font;
import java.awt.GridLayout;
import java.security.SecureRandom;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import model.UniCollege;
import model.UniCollegeDir;
import model.UniDepartment;
import model.UniDepartmentDir;
import model.UniExamCell;
import model.UniStudent;
import model.UniStudentDir;
import model.University;
import model.UniversityDir;

/**
 *
 * @author naini
 */
public class SystemAdminGovernmentJPanelOld extends javax.swing.JPanel {

    /**
     * Creates new form Uni_ExamCell_JPanel
     */
    JSplitPane splitPane;
    UniStudent selectedStudent = new UniStudent();
    UniCollegeDir uniColleges = new UniCollegeDir();
    UniversityDir universities = new UniversityDir();
    UniDepartmentDir uniDepartments = new UniDepartmentDir();
    UniStudentDir uniStudents = new UniStudentDir();
    UniExamCell selectedUniExamCell = new UniExamCell();
    Integer selectedUniversityId = 0;
    Integer selectedCollegeId = 0;
    Integer selectedDepartmentId = 0;
    Integer selectedRow = -1;
    
    Connection conn = null;
    
    public SystemAdminGovernmentJPanelOld(JSplitPane splitPane, Connection conn, UniExamCell selectedUniExamCell) {
        initComponents();
        
        this.splitPane = splitPane;
        this.conn = conn;
        
        tblStudentDetails.getTableHeader().setFont( new Font( "Trebuchet MS" , Font.PLAIN, 18 ));
        this.selectedUniExamCell = selectedUniExamCell;
        lblHeading2.setText(this.selectedUniExamCell.getName());
        getAllUniversityData();
        
        selectedCollegeId = 1;
        getAllStudents();
        clearAllFields();
        populateStudentTable(uniStudents);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        kGradientPanel1 = new keeptoo.KGradientPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStudentDetails = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        btnAdd = new button.Button();
        btnDelete = new button.Button();
        btnSearch = new button.Button();
        btnRefreshTable = new button.Button();
        btnClear = new button.Button();
        btnViewSelected = new button.Button();
        txtCompanyName = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();
        txtLocation = new javax.swing.JTextField();
        btnLogOut = new button.Button();
        lblStudentName = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        lblHeading2 = new javax.swing.JLabel();
        lblHeading1 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1000, 650));

        kGradientPanel1.setkEndColor(new java.awt.Color(204, 0, 102));
        kGradientPanel1.setkGradientFocus(600);
        kGradientPanel1.setkStartColor(new java.awt.Color(255, 51, 51));
        kGradientPanel1.setPreferredSize(new java.awt.Dimension(1005, 700));

        tblStudentDetails.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        tblStudentDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Government Name", "Username", "Password", "Location"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblStudentDetails);

        jLabel7.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Password");

        btnAdd.setBackground(new java.awt.Color(204, 255, 204));
        btnAdd.setForeground(new java.awt.Color(0, 0, 255));
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icon_5.png"))); // NOI18N
        btnAdd.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        btnAdd.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(204, 255, 204));
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icon_6.png"))); // NOI18N
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSearch.setBackground(new java.awt.Color(204, 255, 204));
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icon_7.png"))); // NOI18N
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnRefreshTable.setBackground(new java.awt.Color(204, 255, 204));
        btnRefreshTable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icon_4.png"))); // NOI18N
        btnRefreshTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshTableActionPerformed(evt);
            }
        });

        btnClear.setBackground(new java.awt.Color(204, 255, 204));
        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icon_8.png"))); // NOI18N
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnViewSelected.setBackground(new java.awt.Color(204, 255, 204));
        btnViewSelected.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icon_9.png"))); // NOI18N
        btnViewSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewSelectedActionPerformed(evt);
            }
        });

        txtCompanyName.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N

        txtPassword.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N

        txtLocation.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N

        btnLogOut.setBackground(new java.awt.Color(204, 204, 255));
        btnLogOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icon_3.png"))); // NOI18N
        btnLogOut.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });

        lblStudentName.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        lblStudentName.setForeground(new java.awt.Color(255, 255, 255));
        lblStudentName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblStudentName.setText("Government Name");

        jLabel9.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Username");

        jLabel17.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel17.setText("Location");

        jLabel14.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("GOVERNMENT DETAILS");

        txtUsername.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        txtUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsernameActionPerformed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        lblHeading2.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N

        lblHeading1.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N

        javax.swing.GroupLayout kGradientPanel1Layout = new javax.swing.GroupLayout(kGradientPanel1);
        kGradientPanel1.setLayout(kGradientPanel1Layout);
        kGradientPanel1Layout.setHorizontalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kGradientPanel1Layout.createSequentialGroup()
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRefreshTable, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnViewSelected, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(kGradientPanel1Layout.createSequentialGroup()
                        .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                                .addComponent(lblHeading1, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblHeading2, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(237, 237, 237)
                                .addComponent(btnLogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                                .addGap(64, 64, 64)
                                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(kGradientPanel1Layout.createSequentialGroup()
                                        .addComponent(lblStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtCompanyName, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(kGradientPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(12, 12, 12)
                                        .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(kGradientPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(kGradientPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(164, 164, 164)
                                .addComponent(btnSave)
                                .addGap(32, 32, 32)
                                .addComponent(btnUpdate)))
                        .addGap(0, 19, Short.MAX_VALUE)))
                .addContainerGap())
        );

        kGradientPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAdd, btnClear, btnDelete, btnRefreshTable, btnSearch, btnViewSelected});

        kGradientPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtCompanyName, txtLocation, txtPassword});

        kGradientPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnSave, btnUpdate});

        kGradientPanel1Layout.setVerticalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kGradientPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(btnLogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(kGradientPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                                .addComponent(lblHeading2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(lblHeading1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnSearch, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRefreshTable, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(btnViewSelected, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel14)
                .addGap(18, 18, 18)
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStudentName)
                    .addComponent(txtCompanyName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kGradientPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(kGradientPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addContainerGap(127, Short.MAX_VALUE))
        );

        kGradientPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAdd, btnClear, btnDelete, btnRefreshTable, btnSearch, btnViewSelected});

        kGradientPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtCompanyName, txtLocation, txtPassword});

        kGradientPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnSave, btnUpdate});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1000, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewSelectedActionPerformed
        // TODO add your handling code here:
        selectedRow = tblStudentDetails.getSelectedRow();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(this, "Please select a row");
            return;
        }else{
            DefaultTableModel tableModel = (DefaultTableModel) tblStudentDetails.getModel();
            UniStudent student = (UniStudent) tableModel.getValueAt(selectedRow, 0);
            displayStudent(student);
            selectedStudent = student;
        }
    }//GEN-LAST:event_btnViewSelectedActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        selectedRow = tblStudentDetails.getSelectedRow();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(this, "Please select a row");
            return;
        }else{
            DefaultTableModel tableModel = (DefaultTableModel) tblStudentDetails.getModel();
            UniStudent student = (UniStudent) tableModel.getValueAt(selectedRow, 0);
            deleteStudent(student);
            selectedStudent = student;
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        clearAllFields();
        btnSave.setEnabled(true);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        // TODO add your handling code here:
        int res = JOptionPane.showConfirmDialog(null, "Are you sure you want to logout?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE);
        if(res == 0) {
            ChoiceJPanel choicePanel = new ChoiceJPanel(splitPane, conn);
            splitPane.setRightComponent(choicePanel);
        }
        else{
            //Pressed No
        }
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        clearAllFields();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnRefreshTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshTableActionPerformed
        // TODO add your handling code here:
        populateStudentTable(uniStudents);
    }//GEN-LAST:event_btnRefreshTableActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        JPanel panel = new JPanel(new GridLayout(0, 1));
        panel.add(new JLabel("Please select a field:"));
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.addElement("Name");
        model.addElement("Sevis Id");
        model.addElement("Intake");
        model.addElement("Course");
        model.addElement("Semester");
        model.addElement("Department");
        JComboBox comboBox = new JComboBox(model);
        panel.add(comboBox);

        int resultField = JOptionPane.showConfirmDialog(null, panel, "Search by Field", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        if(resultField == JOptionPane.OK_OPTION){
            String fieldSelected = comboBox.getSelectedItem().toString();

            DefaultComboBoxModel modelIntake = new DefaultComboBoxModel();
            
            LocalDate today = LocalDate.now();
            Integer year = today.getYear();
            ArrayList<Integer> listYears = new ArrayList<Integer>();
            for(int i = year - 2; i < year+1; i++){
                listYears.add(i);
            }

            ArrayList<String> terms = new ArrayList<String>();
            terms.add("Spring");
            terms.add("Summer");
            terms.add("Fall");

            ArrayList<String> termsYears = new ArrayList<String>();
            for(Integer i : listYears){
                for(String j: terms){
                    termsYears.add(j + " " + String.valueOf(i));
                }
            }

            for(String str : termsYears){
                modelIntake.addElement(str);
            }
            
            JComboBox comboBoxIntake = new JComboBox(modelIntake);
            
            DefaultComboBoxModel depts = new DefaultComboBoxModel();
            for(UniDepartment dept : uniDepartments.getUniDepartmentList()){
                if(dept.getCollege().getId() == selectedCollegeId){
                    depts.addElement(dept.getName());
                }
            }
            JComboBox comboBoxDepts = new JComboBox(depts);

            DefaultComboBoxModel sems = new DefaultComboBoxModel();
            for(Integer i = 1; i < 5; i++){
                sems.addElement(i.toString());
            }
            JComboBox comboBoxSems = new JComboBox(sems);
            
            JTextField txtField = new JTextField("");
            
            panel.add(new JLabel("Value:"));
            
            if(fieldSelected.equalsIgnoreCase("Intake")){
                comboBox.setEnabled(false);
                panel.add(comboBoxIntake);
            }else if(fieldSelected.equalsIgnoreCase("Department")){
                comboBox.setEnabled(false);
                panel.add(comboBoxDepts);
            }else if(fieldSelected.equalsIgnoreCase("Semester")){
                comboBox.setEnabled(false);
                panel.add(comboBoxSems);
            }else{
                comboBox.setEnabled(false);
                panel.add(txtField);
            }

            int resultValue = JOptionPane.showConfirmDialog(null, panel, "Search by Field", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(resultValue == JOptionPane.OK_OPTION) {

                String fieldValue;
                if(fieldSelected.equalsIgnoreCase("Intake")){
                    fieldValue = comboBoxIntake.getSelectedItem().toString();
                } else if(fieldSelected.equalsIgnoreCase("Department")){
                    fieldValue = comboBoxDepts.getSelectedItem().toString();
                } else if(fieldSelected.equalsIgnoreCase("Semester")){
                    fieldValue = comboBoxSems.getSelectedItem().toString();
                } else {
                    fieldValue = txtField.getText();
                }

                if(fieldValue.equalsIgnoreCase("")){
                    JOptionPane.showMessageDialog(this, "Please enter a value");
                }else if(fieldSelected.equalsIgnoreCase("Sevis Id") && !isSevisIdValid(fieldValue)){
                    JOptionPane.showMessageDialog(this, "Please enter a valid Sevis Id");
                }else if(fieldSelected.equalsIgnoreCase("Name") && !isNameValid(fieldValue)){
                    JOptionPane.showMessageDialog(this, "Please enter a valid Name");
                }else if(fieldSelected.equalsIgnoreCase("Course") && !isCourseNameValid(fieldValue)){
                    JOptionPane.showMessageDialog(this, "Please enter a valid Course Name");
                }else{
                    UniStudentDir resultStudentDir = new UniStudentDir();
                    ArrayList<UniStudent> resultStudents = new ArrayList<UniStudent>();
                    
                    if(fieldSelected.equalsIgnoreCase("Name")){
                        resultStudents = uniStudents.searchByName(fieldValue);
                    }else if(fieldSelected.equalsIgnoreCase("Sevis Id")){
                        resultStudents.add(uniStudents.searchBySevisId(fieldValue));
                    }else if(fieldSelected.equalsIgnoreCase("Intake")){
                        resultStudents = uniStudents.searchByIntake(fieldValue);
                    }else if(fieldSelected.equalsIgnoreCase("Course")){
                        resultStudents = uniStudents.searchByCourse(fieldValue);
                    }else if(fieldSelected.equalsIgnoreCase("Semester")){
                        resultStudents = uniStudents.searchBySemester(Integer.valueOf(fieldValue));
                    }else if(fieldSelected.equalsIgnoreCase("Department")){
                        UniDepartment department = uniDepartments.searchByName(fieldValue);
                        resultStudents = uniStudents.searchByDepartment(department);
                    }else{
                        resultStudents = null;
                    }

                    if(resultStudents.isEmpty()){
                        JOptionPane.showMessageDialog(this, "No Results Found");
                        populateStudentTable(uniStudents);
                    }else{
                        JOptionPane.showMessageDialog(this, "Entries found");
                        resultStudentDir.setUniStudentList(resultStudents);
                        populateStudentTable(resultStudentDir);
                    }
                }
            }else{
                JOptionPane.showMessageDialog(this, "Search Cancelled");
            }
        }else{
            JOptionPane.showMessageDialog(this, "Search Cancelled");
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) tblStudentDetails.getModel();
        UniStudent student = (UniStudent) tableModel.getValueAt(selectedRow, 0);
        updateStudent(student);
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        saveStudentDetails();

    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsernameActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private button.Button btnAdd;
    private button.Button btnClear;
    private button.Button btnDelete;
    private button.Button btnLogOut;
    private button.Button btnRefreshTable;
    private javax.swing.JButton btnSave;
    private button.Button btnSearch;
    private javax.swing.JButton btnUpdate;
    private button.Button btnViewSelected;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private keeptoo.KGradientPanel kGradientPanel1;
    private javax.swing.JLabel lblHeading1;
    private javax.swing.JLabel lblHeading2;
    private javax.swing.JLabel lblStudentName;
    private javax.swing.JTable tblStudentDetails;
    private javax.swing.JTextField txtCompanyName;
    private javax.swing.JTextField txtLocation;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

    public void getAllUniversityData(){
         try {
                //Universities
                String queryUniversity = "SELECT * FROM university WHERE id='"+selectedUniExamCell.getUniversityId()+"'";
                Statement st = conn.createStatement();
                ResultSet rs = st.executeQuery(queryUniversity);                
                while (rs.next())
                {
                    University university = universities.addUniversity();
                    university.setId(rs.getInt("id"));
                    university.setName(rs.getString("name"));
                    university.setDistrict(rs.getString("district"));
                    university.setState(rs.getString("state"));
                    university.setCountry(rs.getString("country"));
                    university.setPincode(rs.getLong("pincode"));
                }
                st.close();
                lblHeading1.setText(universities.searchById(selectedUniExamCell.getUniversityId()).getName());
                //Colleges
                String queryCollege = "SELECT * FROM uni_college WHERE university_id='"+selectedUniExamCell.getId()+"'";
                Statement stCollege = conn.createStatement();
                ResultSet rsCollege = stCollege.executeQuery(queryCollege);                
                while (rsCollege.next())
                {
                    UniCollege college = uniColleges.addUniCollege();
                    college.setId(rsCollege.getInt("id"));
                    college.setName(rsCollege.getString("name"));

                    for(University uni : universities.getUniversityList()){
                        if(uni.getId() == rsCollege.getInt("university_id")){
                            college.setUniversity(uni);
                        }
                    }

                }
                stCollege.close();

                //Departments
                Statement stDepartment = conn.createStatement();
                for(UniCollege college:uniColleges.getUniCollegeList()){
                    String queryDepartment = "SELECT * FROM uni_department WHERE uni_college_id='"+college.getId()+"'";

                    ResultSet rsDepartment = stDepartment.executeQuery(queryDepartment);                
                    while (rsDepartment.next())
                    {
                        UniDepartment dept = uniDepartments.addUniDepartment();
                        dept.setId(rsDepartment.getInt("id"));
                        dept.setName(rsDepartment.getString("name"));
                        dept.setCollege(college);
    //                    for(UniCollege college : uniColleges.getUniCollegeList()){
    //                        if(college.getId() == rsDepartment.getInt("uni_college_id")){
    //                            dept.setCollege(college);
    //                        }
                    }
                
                }
                stDepartment.close();
              
                

            } catch (SQLException ex) {
                System.out.println("An error occurred. Maybe user/password is invalid");
                ex.printStackTrace();
        }       
    }
    
    public void clearAllFields(){
        txtCompanyName.setText("");
        
        txtPassword.setText("");
        txtUsername.setText("");
        txtLocation.setText("");
        
        populateCmbBoxDepartments(selectedCollegeId);
        populateCmbBoxIntake();
        
        
        btnSave.setEnabled(false);
        btnUpdate.setEnabled(false);
        txtUsername.setEnabled(true);
    }
    
    public void populateCmbBoxDepartments(Integer selectedCollegeId){
        
        DefaultComboBoxModel depts = new DefaultComboBoxModel();
        for(UniDepartment dept : uniDepartments.getUniDepartmentList()){
//            if(dept.getCollege().getId() == selectedCollegeId){
                depts.addElement(dept.getName());
//            }
        }

        

       
        
    }
    
    public void populateCmbBoxIntake(){
        LocalDate today = LocalDate.now();
        Integer year = today.getYear();
        ArrayList<Integer> listYears = new ArrayList<Integer>();
        for(int i=year - 2; i< year +  1; i++){
            listYears.add(i);
        }

        ArrayList<String> terms = new ArrayList<String>();
        terms.add("Spring");
        terms.add("Summer");
        terms.add("Fall");

        ArrayList<String> termsYears = new ArrayList<String>();
        for(Integer i : listYears){
            for(String j: terms){
                termsYears.add(j + " " + String.valueOf(i));
            }
        }

        DefaultComboBoxModel modelTermYear = new DefaultComboBoxModel();
        for(String str : termsYears){
            modelTermYear.addElement(str);
        }

        
    }
    
    public boolean isNameValid(String str) {
        String regex = "^[a-zA-Z0-9 ]{0,30}$";
        Pattern pattern = Pattern.compile(regex);
        
        Matcher matcher = pattern.matcher(str);
        return matcher.matches();
    }
    
    public static boolean isEmailValid(String str){
        String regex = "^(?=.{1,64}@)[A-Za-z0-9_-]+(\\.[A-Za-z0-9_-]+)*@" + "[A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{1,})$";
        Pattern pattern = Pattern.compile(regex);
        
        Matcher matcher = pattern.matcher(str);
        return matcher.matches();
    }
    
    public static boolean isCellNumberValid(String str){
        String regex = "^\\d{10}$";
        Pattern pattern = Pattern.compile(regex);
        
        Matcher matcher = pattern.matcher(str);
        return matcher.matches();
    }
    
    public static boolean isSevisIdValid(String str){
        String regex = "[A-Z]+\\d{9}$";
        Pattern pattern = Pattern.compile(regex);
        
        Matcher matcher = pattern.matcher(str);
        return matcher.matches();
    }
    
     public boolean isSevisIdUnique(String str){
        Boolean valid = true;
        for(UniStudent student : uniStudents.getUniStudentList()){
            if(student.getSevisId().equalsIgnoreCase(str)){
                valid = false;
            }
        }
        return valid;
    }
    
    public boolean isCourseNameValid(String str) {
        String regex = "^[a-zA-Z0-9 ]{0,100}$";
        Pattern pattern = Pattern.compile(regex);
        
        Matcher matcher = pattern.matcher(str);
        return matcher.matches();
    }
    
    public void saveStudentDetails(){
        if( txtCompanyName.getText().equalsIgnoreCase("") || txtUsername.getText().equalsIgnoreCase("") || 
                txtPassword.getText().equalsIgnoreCase("") || txtLocation.getText().equalsIgnoreCase("") 
                ){
            JOptionPane.showMessageDialog(this, "Please fill all fields");
        }else{
            if(!isNameValid(txtCompanyName.getText())){
                JOptionPane.showMessageDialog(this, "Please enter a valid Name");
            }else if(!isSevisIdValid(txtUsername.getText())){
                JOptionPane.showMessageDialog(this, "Please enter a valid Sevid Id of form ABC123456789");
            }else if(!isSevisIdUnique(txtUsername.getText())){
                JOptionPane.showMessageDialog(this, "Sevid Id already exists. Please enter a unique Sevid Id.");
            }else if(!isCellNumberValid(txtPassword.getText())){
                JOptionPane.showMessageDialog(this, "Please enter a valid Contact Number");
            }else if(!isEmailValid(txtLocation.getText())){
                JOptionPane.showMessageDialog(this, "Please enter a valid Email Id");
            }else{
                UniStudent student = uniStudents.addUniStudent();
                student.setName(txtCompanyName.getText());
                student.setSevisId(txtUsername.getText());
                student.setContactNo(Long.valueOf(txtPassword.getText()));
                student.setEmailId(txtLocation.getText());
               
                student.setPassword(generateRandomPassword(8));
                
                
                
                
                saveStudentToDb(student);
                sendEmail(student);
                clearAllFields();
                populateStudentTable(uniStudents);
                
            }
        }   
    }
    
    public void sendEmail(UniStudent recepient){
        
        Properties properties = new Properties();
        
        properties.put("mail.smtp.auth","true");
        properties.put("mail.smtp.starttls.enable","true");
        properties.put("mail.smtp.host","smtp.gmail.com");
        properties.put("mail.smtp.port","587");
        
        String myAccountEmail = "nice.job.app@gmail.com";
        String password = "pfwuxjdssssnikpi";
        
        Session session = Session.getInstance(properties, new Authenticator(){
            @Override
            protected PasswordAuthentication getPasswordAuthentication(){
                return new PasswordAuthentication(myAccountEmail,password);
            }
        });
        
        Message message = prepareMessage(session, myAccountEmail, recepient);
        try {
            Transport.send(message);
        } catch (MessagingException ex) {
            Logger.getLogger(SystemAdminGovernmentJPanelOld.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("Message sent successfully");
   
    }
    
    private static Message prepareMessage(Session session, String myAccountEmail, UniStudent recepient){
        try {
            
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(myAccountEmail));
            message.setRecipient(Message.RecipientType.TO, new InternetAddress(recepient.getEmailId()));
            message.setSubject("Successful Account Registration");
            String msg = "<b>Hey "+ recepient.getName()+"!,</b> <br> <br>Your registration is complete. <br> <br>Below are your "
                    + "credentials: <br><b>Username:</b> "+recepient.getSevisId()+"<br><b>Password:</b> "+recepient.getPassword()+"<br> <br>You will not be granted access to Job Application Portal until your Advisor approves you.<br> <br>Regards,<br>Nice Job Team";
            message.setContent(msg, "text/html; charset=utf-8");
            return message;

        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(SystemAdminGovernmentJPanelOld.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }
    
    public void getAllStudents(){
        try {
            String queryStudents = "SELECT * FROM uni_student WHERE university_id='"+selectedUniExamCell.getUniversityId()+"'";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(queryStudents);                
                while (rs.next())
                {
                    UniStudent student = uniStudents.addUniStudent();
                    
                    student.setName(rs.getString("name"));
                    student.setSevisId(rs.getString("student_gov_id"));
                    student.setContactNo(rs.getLong("contact_no"));
                    student.setEmailId(rs.getString("email"));
                    student.setGpa(rs.getDouble("gpa"));
                    student.setIntake(rs.getString("intake"));
                    student.setSemester(rs.getInt("semester"));
                    student.setCourse(rs.getString("course"));
                    
                    UniDepartment department = uniDepartments.searchById(rs.getInt("uni_department_id"));
                    student.setDepartment(department);
                }
                st.close();
        } catch (SQLException ex) {
            Logger.getLogger(SystemAdminGovernmentJPanelOld.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void populateStudentTable(UniStudentDir uniStudents){
        DefaultTableModel tableModel = (DefaultTableModel) tblStudentDetails.getModel();
        tableModel.setRowCount(0);
        
        for(UniStudent student : uniStudents.getUniStudentList()){
            Object row[] = new Object[8];
            row[0] = student;
            row[1] = student.getName();
            row[2] = student.getContactNo().toString();
            row[3] = student.getEmailId();
            row[4] = student.getIntake();
            row[5] = student.getCourse();
            row[6] = student.getGpa();
            row[7] = student.getSemester().toString();
            
            tableModel.addRow(row);
        }
    }
    
    public void saveStudentToDb(UniStudent student){
        try {
            String queryNewStudent = "INSERT into uni_student (student_gov_id, name, contact_no, email, intake, course, gpa, semester, uni_department_id, work_eligibility, jd_watch_eligible, password, university_id) VALUES "
                    + "('" + student.getSevisId().toString() + "', '" + student.getName() + "' , '" + student.getContactNo().toString() + "' "
                    + ", '" + student.getEmailId() + "' , '" + student.getIntake() + "' , '" + student.getCourse() + "' , '" + student.getGpa().toString() + "' "
                    + ", '" + student.getSemester().toString() + "' , '" + student.getDepartment().getId().toString() + "' , '0' , '0' , '" + student.getPassword() + "',+ '"+student.getDepartment().getCollege().getUniversity().getId().toString()+"' )";
            Statement st = conn.createStatement();
            st.executeUpdate(queryNewStudent); 
            st.close();
        } catch (SQLException ex) {
            Logger.getLogger(SystemAdminGovernmentJPanelOld.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public static String generateRandomPassword(int len)
    {
        // ASCII range – alphanumeric (0-9, a-z, A-Z)
        final String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
 
        SecureRandom random = new SecureRandom();
        StringBuilder sb = new StringBuilder();
 
        // each iteration of the loop randomly chooses a character from the given
        // ASCII range and appends it to the `StringBuilder` instance
 
        for (int i = 0; i < len; i++)
        {
            int randomIndex = random.nextInt(chars.length());
            sb.append(chars.charAt(randomIndex));
        }
 
        return sb.toString();
    }
    
    public void displayStudent(UniStudent student){
        txtCompanyName.setText(student.getName());
        
        txtPassword.setText(student.getContactNo().toString());
        txtUsername.setText(student.getSevisId());
        txtLocation.setText(student.getEmailId());
        
        
        btnSave.setEnabled(false);
        btnUpdate.setEnabled(true);
        
        txtUsername.setEnabled(false);
    }
    
    public void updateStudent(UniStudent oldStudent){
        if( txtCompanyName.getText().equalsIgnoreCase("") || txtUsername.getText().equalsIgnoreCase("") || 
                txtPassword.getText().equalsIgnoreCase("") || txtLocation.getText().equalsIgnoreCase("")
                ){
            JOptionPane.showMessageDialog(this, "Please fill all fields");
        }else{
            if(!isNameValid(txtCompanyName.getText())){
                JOptionPane.showMessageDialog(this, "Please enter a valid Name");
            }else if(!isSevisIdValid(txtUsername.getText())){
                JOptionPane.showMessageDialog(this, "Please enter a valid Sevid Id of form ABC123456789");
            }else if(!isCellNumberValid(txtPassword.getText())){
                JOptionPane.showMessageDialog(this, "Please enter a valid Contact Number");
            }else if(!isEmailValid(txtLocation.getText())){
                JOptionPane.showMessageDialog(this, "Please enter a valid Email Id");
            
            }else{
                UniStudent student = new UniStudent();
                student.setName(txtCompanyName.getText());
                student.setSevisId(txtUsername.getText());
                student.setContactNo(Long.valueOf(txtPassword.getText()));
                student.setEmailId(txtLocation.getText());
            
                student.setPassword(generateRandomPassword(8));
                
               

                
                uniStudents.updateUniStudent(oldStudent, student);
                             
                updateStudentToDb(oldStudent, student);
                clearAllFields();
                populateStudentTable(uniStudents);
                
            }
        }
    }
    
    public void updateStudentToDb(UniStudent oldStudent, UniStudent student){
        try {
            String queryNewStudent = "UPDATE uni_student SET name = '" + student.getName() + "' , contact_no = '" + student.getContactNo().toString() + "'"
                    + ", email = '" + student.getEmailId() + "', intake = '" + student.getIntake() + "', course = '" + student.getCourse() + "'"
                    + ", gpa = '" + student.getGpa().toString() + "', semester = '" + student.getSemester().toString() + "', uni_department_id = '" + student.getDepartment().getId().toString() + "' WHERE "
                    + "student_gov_id = '" + oldStudent.getSevisId() + "'";
            Statement st = conn.createStatement();
            st.executeUpdate(queryNewStudent);   
            st.close();
        } catch (SQLException ex) {
            Logger.getLogger(SystemAdminGovernmentJPanelOld.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void deleteStudent(UniStudent student){
        int result = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this entry?", "Confirm Deletion", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        if(result == JOptionPane.OK_OPTION ){
            uniStudents.deleteUniStudent(student);
            deleteStudentFromDb(student);
            clearAllFields();
            populateStudentTable(uniStudents);
        }else{
            JOptionPane.showMessageDialog(this, "Deletion cancelled");
        }
        
    }
    
    public void deleteStudentFromDb(UniStudent student){
        try {
            String queryNewStudent = "DELETE FROM uni_student WHERE "
                    + "student_gov_id = '" + student.getSevisId() + "'";
            Statement st = conn.createStatement();
            st.executeUpdate(queryNewStudent);   
            st.close();
        } catch (SQLException ex) {
            Logger.getLogger(SystemAdminGovernmentJPanelOld.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
